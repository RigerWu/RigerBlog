<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>SpringBoot工程的创建运行发布</title>
    <link href="/2021/01/20/springboot-gong-cheng-de-chuang-jian-yun-xing-fa-bu/"/>
    <url>/2021/01/20/springboot-gong-cheng-de-chuang-jian-yun-xing-fa-bu/</url>
    
    <content type="html"><![CDATA[<h1 id="Idea创建SrpingBoot工程"><a href="#Idea创建SrpingBoot工程" class="headerlink" title="Idea创建SrpingBoot工程"></a>Idea创建SrpingBoot工程</h1><h2 id="1-创建"><a href="#1-创建" class="headerlink" title="1. 创建"></a>1. 创建</h2><p>由于博客的示例代码都放在<code>web-starter-demos</code>项目里，所以这里我创建的是<code>module</code>而不是<code>project</code></p><p>我们使用官方的<code>Spring Initializr</code>来初始化工程，jdk选择1.8：</p><p><img src="https://riger.oss-cn-shanghai.aliyuncs.com/img/image-20210112102036076.png" alt="image-20210112102036076"></p><p>填好<code>Group</code>,<code>Artifact</code>,选择<code>Java Version</code>为8，点击<code>Next</code>：</p><p><img src="https://riger.oss-cn-shanghai.aliyuncs.com/img/image-20210112102749459.png" alt="image-20210112102749459"></p><p><code>Spring Boot</code>我选择目前最新的稳定版本2.4.1，你可以在<a href="https://spring.io/projects/spring-boot#learn">官网</a>查询最新GA版本</p><p>同时这个界面还能让我们方便得选择一些开发常用的依赖，本文的简单项目，我们只添加以下两个，点击<code>Next</code>：</p><p><img src="https://riger.oss-cn-shanghai.aliyuncs.com/img/image-20210112135337955.png" alt="image-20210112135337955"></p><p>填好<code>Module Name</code>，点击<code>Finish</code>：</p><p><img src="https://riger.oss-cn-shanghai.aliyuncs.com/img/image-20210112103919173.png" alt="image-20210112103919173"></p><p>我们得到了如下目录结构的工程：</p><p><img src="https://riger.oss-cn-shanghai.aliyuncs.com/img/image-20210112105357563.png" alt="image-20210112105357563"></p><h2 id="2-运行"><a href="#2-运行" class="headerlink" title="2. 运行"></a>2. 运行</h2><p>我们直接点击主类的启动按钮：</p><p><img src="https://riger.oss-cn-shanghai.aliyuncs.com/img/image-20210112105444193.png" alt="image-20210112105444193"></p><p>项目就运行起来了：</p><p><img src="https://riger.oss-cn-shanghai.aliyuncs.com/img/image-20210112105538899.png" alt="image-20210112105538899"></p><p>可以看到默认情况下，项目运行在8080端口</p><h2 id="3-优化"><a href="#3-优化" class="headerlink" title="3. 优化"></a>3. 优化</h2><p>作为开发者，我们电脑上肯定有装 <code>Maven</code>并配置了环境变量，所以我们不需要工程初始化带的<code>Maven Wrapper</code></p><p>由于我这里是<code>module</code> 外层<code>.gitignore</code>已经做了全局配置，这里也不需要，帮助文档也删掉</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">rm -rf .mvn mvnw* .gitignore HELP.md<br></code></pre></div></td></tr></table></figure><p>建议使用<code>yml</code>配置，我们把<code>application.properties</code> 改成 <code>application.yml</code></p><p>一般建议显示指定端口号和服务名：</p><figure class="highlight yaml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs yaml"><span class="hljs-attr">server:</span><br>  <span class="hljs-attr">port:</span> <span class="hljs-number">8080</span><br><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">application:</span><br>    <span class="hljs-attr">name:</span> <span class="hljs-string">web-simple</span><br></code></pre></div></td></tr></table></figure><p>编辑一下 IDE 里的运行配置：</p><p><img src="https://riger.oss-cn-shanghai.aliyuncs.com/img/image-20210112135821537.png" alt="image-20210112135821537"></p><p>这里可以设置虚拟机参数，环境变量等：</p><p><img src="https://riger.oss-cn-shanghai.aliyuncs.com/img/image-20210112140241936.png" alt="image-20210112140241936"></p><p>如图，一般开发的时候，我会制定比较小的堆内存大小，这样可以启动多个服务而不卡</p><p>还可以指定服务端口，比如要跑多个服务，直接点左上角复制一份配置，改个端口号就可以</p><p>以及可以指定 <code>profile</code>，比如区分开发环境、生产环境等，不需要改配置文件，即可指定启动</p><h2 id="4-请求"><a href="#4-请求" class="headerlink" title="4. 请求"></a>4. 请求</h2><p>我们编写一个简单的<code>Controller</code></p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-meta">@RestController</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">HelloController</span> </span>&#123;<br>    <span class="hljs-meta">@GetMapping(&quot;/hello&quot;)</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">hello</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Hello World!&quot;</span>;<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>运行后可以直接访问，这里我使用插件<a href="https://plugins.jetbrains.com/plugin/14280-restfultool">RestfullTool</a>来访问：</p><p><img src="https://riger.oss-cn-shanghai.aliyuncs.com/img/image-20210112114058484.png" alt="image-20210112114058484"></p><h2 id="5-发布"><a href="#5-发布" class="headerlink" title="5. 发布"></a>5. 发布</h2><p>我们在项目根目录下使用maven命令来打包项目（使用Idea的Maven插件点击按钮也可以）：</p><p><code>-Dmaven.test.skip=true</code>可以跳过测试</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">mvn clean package -Dmaven.test.skip=true<br></code></pre></div></td></tr></table></figure><p><img src="https://riger.oss-cn-shanghai.aliyuncs.com/img/image-20210112115142859.png" alt="image-20210112115142859"></p><p>打包完成后，<code>target</code>路径下就有了我们需要的可执行 <code>jar</code>：</p><p><img src="https://riger.oss-cn-shanghai.aliyuncs.com/img/image-20210112115232952.png" alt="image-20210112115232952"></p><p>然后就可以把 <code>jar</code>丢到服务端，运行起来：</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">java -jar web-simple-0.0.1-SNAPSHOT.jar<br></code></pre></div></td></tr></table></figure><p>但是这样会占用控制台，可以使用 <code>nohup</code>命令在后台启动</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">nohup java -jar web-simple-0.0.1-SNAPSHOT.jar &gt;/dev/null 2&gt;&amp;1 &amp;<br></code></pre></div></td></tr></table></figure><p>一般在服务器端会写一个启动脚本来控制应用的启动、关闭等操作，并且还可以配置想要的启动参数、环境变量等</p><p>这会在后续的博文中详细介绍，这里仅仅给出一个我使用的启动脚本文件：</p><p><code>start.sh</code></p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash"><span class="hljs-meta">#!/bin/bash</span><br>JDK_HOME=<span class="hljs-string">&quot;java&quot;</span><br>VM_OPTS=<span class="hljs-string">&quot;-Xms1g -Xmx1g&quot;</span><br>SPB_OPTS=<span class="hljs-string">&quot;--spring.profiles.active=test&quot;</span><br>APP_LOCATION=<span class="hljs-string">&quot;web-simple-0.0.1-SNAPSHOT.jar&quot;</span><br>APP_NAME=<span class="hljs-string">&quot;web-simple-0.0.1-SNAPSHOT.jar&quot;</span><br>PID_CMD=<span class="hljs-string">&quot;ps -ef |grep <span class="hljs-variable">$APP_NAME</span> |grep -v grep |awk &#x27;&#123;print \$2&#125;&#x27;&quot;</span><br><br><span class="hljs-function"><span class="hljs-title">start</span></span>() &#123;<br>  <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;=============================start==============================&quot;</span><br>  PID=$(<span class="hljs-built_in">eval</span> <span class="hljs-string">&quot;<span class="hljs-variable">$PID_CMD</span>&quot;</span>)<br>  <span class="hljs-keyword">if</span> [[ -n <span class="hljs-variable">$PID</span> ]]; <span class="hljs-keyword">then</span><br>    <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;<span class="hljs-variable">$APP_NAME</span> is already running,PID is <span class="hljs-variable">$PID</span>&quot;</span><br>  <span class="hljs-keyword">else</span><br>    nohup <span class="hljs-variable">$JDK_HOME</span> <span class="hljs-variable">$VM_OPTS</span> -jar <span class="hljs-variable">$APP_LOCATION</span> <span class="hljs-variable">$SPB_OPTS</span> &gt;/dev/null 2&gt;&amp;1 &amp;<br>    <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;nohup <span class="hljs-variable">$JDK_HOME</span> <span class="hljs-variable">$VM_OPTS</span> -jar <span class="hljs-variable">$APP_LOCATION</span> <span class="hljs-variable">$SPB_OPTS</span> &gt;/dev/null 2&gt;&amp;1 &amp;&quot;</span><br>    PID=$(<span class="hljs-built_in">eval</span> <span class="hljs-string">&quot;<span class="hljs-variable">$PID_CMD</span>&quot;</span>)<br>    <span class="hljs-keyword">if</span> [[ -n <span class="hljs-variable">$PID</span> ]]; <span class="hljs-keyword">then</span><br>      <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;Start <span class="hljs-variable">$APP_NAME</span> successfully,PID is <span class="hljs-variable">$PID</span>&quot;</span><br>    <span class="hljs-keyword">else</span><br>      <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;Failed to start <span class="hljs-variable">$APP_NAME</span> !!!&quot;</span><br>    <span class="hljs-keyword">fi</span><br>  <span class="hljs-keyword">fi</span><br>  <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;=============================start==============================&quot;</span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-title">stop</span></span>() &#123;<br>  <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;=============================stop==============================&quot;</span><br>  PID=$(<span class="hljs-built_in">eval</span> <span class="hljs-string">&quot;<span class="hljs-variable">$PID_CMD</span>&quot;</span>)<br>  <span class="hljs-keyword">if</span> [[ -n <span class="hljs-variable">$PID</span> ]]; <span class="hljs-keyword">then</span><br>    <span class="hljs-built_in">kill</span> -15 <span class="hljs-string">&quot;<span class="hljs-variable">$PID</span>&quot;</span><br>    sleep 5<br>    PID=$(<span class="hljs-built_in">eval</span> <span class="hljs-string">&quot;<span class="hljs-variable">$PID_CMD</span>&quot;</span>)<br>    <span class="hljs-keyword">if</span> [[ -n <span class="hljs-variable">$PID</span> ]]; <span class="hljs-keyword">then</span><br>      <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;Stop <span class="hljs-variable">$APP_NAME</span> failed by kill -15 <span class="hljs-variable">$PID</span>,begin to kill -9 <span class="hljs-variable">$PID</span>&quot;</span><br>      <span class="hljs-built_in">kill</span> -9 <span class="hljs-string">&quot;<span class="hljs-variable">$PID</span>&quot;</span><br>      sleep 2<br>      <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;Stop <span class="hljs-variable">$APP_NAME</span> successfully by kill -9 <span class="hljs-variable">$PID</span>&quot;</span><br>    <span class="hljs-keyword">else</span><br>      <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;Stop <span class="hljs-variable">$APP_NAME</span> successfully by kill -15 <span class="hljs-variable">$PID</span>&quot;</span><br>    <span class="hljs-keyword">fi</span><br>  <span class="hljs-keyword">else</span><br>    <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;<span class="hljs-variable">$APP_NAME</span> is not running!!!&quot;</span><br>  <span class="hljs-keyword">fi</span><br>  <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;=============================stop==============================&quot;</span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-title">restart</span></span>() &#123;<br>  <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;=============================restart==============================&quot;</span><br>  stop<br>  start<br>  <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;=============================restart==============================&quot;</span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-title">status</span></span>() &#123;<br>  <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;=============================status==============================&quot;</span><br>  PID=$(<span class="hljs-built_in">eval</span> <span class="hljs-string">&quot;<span class="hljs-variable">$PID_CMD</span>&quot;</span>)<br>  <span class="hljs-keyword">if</span> [[ -n <span class="hljs-variable">$PID</span> ]]; <span class="hljs-keyword">then</span><br>    <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;<span class="hljs-variable">$APP_NAME</span> is running,PID is <span class="hljs-variable">$PID</span>&quot;</span><br>  <span class="hljs-keyword">else</span><br>    <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;<span class="hljs-variable">$APP_NAME</span> is not running!!!&quot;</span><br>  <span class="hljs-keyword">fi</span><br>  <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;=============================status==============================&quot;</span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-title">info</span></span>() &#123;<br>  <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;=============================info==============================&quot;</span><br>  <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;APP_LOCATION: <span class="hljs-variable">$APP_LOCATION</span>&quot;</span><br>  <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;APP_NAME: <span class="hljs-variable">$APP_NAME</span>&quot;</span><br>  <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;JDK_HOME: <span class="hljs-variable">$JDK_HOME</span>&quot;</span><br>  <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;VM_OPTS: <span class="hljs-variable">$VM_OPTS</span>&quot;</span><br>  <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;SPB_OPTS: <span class="hljs-variable">$SPB_OPTS</span>&quot;</span><br>  <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;=============================info==============================&quot;</span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-title">help</span></span>() &#123;<br>  <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;start: start server&quot;</span><br>  <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;stop: shutdown server&quot;</span><br>  <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;restart: restart server&quot;</span><br>  <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;status: display status of server&quot;</span><br>  <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;info: display info of server&quot;</span><br>  <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;help: help info&quot;</span><br>&#125;<br><br><span class="hljs-keyword">case</span> <span class="hljs-variable">$1</span> <span class="hljs-keyword">in</span><br>start)<br>  start<br>  ;;<br>stop)<br>  stop<br>  ;;<br>restart)<br>  restart<br>  ;;<br>status)<br>  status<br>  ;;<br>info)<br>  info<br>  ;;<br><span class="hljs-built_in">help</span>)<br>  <span class="hljs-built_in">help</span><br>  ;;<br>*)<br>  <span class="hljs-built_in">help</span><br>  ;;<br><span class="hljs-keyword">esac</span><br><span class="hljs-built_in">exit</span> $?<br></code></pre></div></td></tr></table></figure><p>可以很方便地使用一下命令：</p><figure class="highlight sql"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sql">~ ./start.sh<br><span class="hljs-keyword">start</span>: <span class="hljs-keyword">start</span> <span class="hljs-keyword">server</span><br><span class="hljs-keyword">stop</span>: <span class="hljs-keyword">shutdown</span> <span class="hljs-keyword">server</span><br>restart: restart <span class="hljs-keyword">server</span><br><span class="hljs-keyword">status</span>: display <span class="hljs-keyword">status</span> <span class="hljs-keyword">of</span> <span class="hljs-keyword">server</span><br>info: display info <span class="hljs-keyword">of</span> <span class="hljs-keyword">server</span><br><span class="hljs-keyword">help</span>: <span class="hljs-keyword">help</span> info<br>~ ./start.sh <span class="hljs-keyword">start</span><br>=============================<span class="hljs-keyword">start</span>==============================<br>nohup <span class="hljs-keyword">java</span> -Xms1g -Xmx1g -jar target/web-simple<span class="hljs-number">-0.0</span><span class="hljs-number">.1</span>-SNAPSHOT.jar <span class="hljs-comment">--spring.profiles.active=dev &gt;/dev/null 2&gt;&amp;1 &amp;</span><br><span class="hljs-keyword">Start</span> web-simple<span class="hljs-number">-0.0</span><span class="hljs-number">.1</span>-SNAPSHOT.jar successfully,PID <span class="hljs-keyword">is</span> <span class="hljs-number">6508</span><br>=============================<span class="hljs-keyword">start</span>==============================<br> ~ ./start.sh <span class="hljs-keyword">status</span><br>=============================<span class="hljs-keyword">status</span>==============================<br>web-simple<span class="hljs-number">-0.0</span><span class="hljs-number">.1</span>-SNAPSHOT.jar <span class="hljs-keyword">is</span> running,PID <span class="hljs-keyword">is</span> <span class="hljs-number">6508</span><br>=============================<span class="hljs-keyword">status</span>==============================<br> ~ ./start.sh <span class="hljs-keyword">stop</span>  <br>=============================<span class="hljs-keyword">stop</span>==============================<br><span class="hljs-keyword">Stop</span> web-simple<span class="hljs-number">-0.0</span><span class="hljs-number">.1</span>-SNAPSHOT.jar successfully <span class="hljs-keyword">by</span> <span class="hljs-keyword">kill</span> <span class="hljs-number">-15</span> <br>=============================<span class="hljs-keyword">stop</span>==============================<br> ~ <br></code></pre></div></td></tr></table></figure><p>源码及脚本都在Github上</p><p>Enjoy it!</p>]]></content>
    
    
    <categories>
      
      <category>spring boot</category>
      
    </categories>
    
    
    <tags>
      
      <tag>spring boot</tag>
      
      <tag>idea</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>后端开发需要掌握的SSH命令和技巧</title>
    <link href="/2020/12/29/hou-duan-kai-fa-xu-yao-zhang-wo-de-ssh-ming-ling-he-ji-qiao/"/>
    <url>/2020/12/29/hou-duan-kai-fa-xu-yao-zhang-wo-de-ssh-ming-ling-he-ji-qiao/</url>
    
    <content type="html"><![CDATA[<h1 id="后端开发需要掌握的-SSH-命令和技巧"><a href="#后端开发需要掌握的-SSH-命令和技巧" class="headerlink" title="后端开发需要掌握的 SSH 命令和技巧"></a>后端开发需要掌握的 SSH 命令和技巧</h1><blockquote><p>本教程仅针对<code>MacOS</code>、<code>Linux</code>平台，不适用<code>Windows</code></p></blockquote><h2 id="1-常用-SSH-命令"><a href="#1-常用-SSH-命令" class="headerlink" title="1. 常用 SSH 命令"></a>1. 常用 SSH 命令</h2><ul><li>生成本机上的 ssh 密钥对</li></ul><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">ssh-keygen -t rsa -C &quot;xxxxx@xxxxx.com&quot;<br></code></pre></div></td></tr></table></figure><p>生成的公钥、私钥在<code>~/.ssh</code>目录下:</p><p><img src="https://riger.oss-cn-shanghai.aliyuncs.com/img/image-20201229134915683.png" alt="image-20201229134915683"></p><ol><li><code>id_rsa</code>是私钥</li><li><code>id_rsa.pub</code>是公钥，可以拷贝里面的字符串放到 Github 的后台，使用 Git 协议可以免密</li><li><code>config</code>是配置文件，后面会详细讲</li><li><code>know_hosts</code>是你信任的服务器列表，连接服务器，输入<code>yes</code>后会加一条</li></ol><ul><li>连接服务器</li></ul><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">ssh -p port user@server_ip<br></code></pre></div></td></tr></table></figure><ul><li>文件拷贝</li></ul><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"> 注意这里的P用的大写的</span><br>scp -P port local_file user@server_ip:server_folder<br>scp -P port user@server_ip:server_file local_folder<br></code></pre></div></td></tr></table></figure><h2 id="2-命令简化和免密"><a href="#2-命令简化和免密" class="headerlink" title="2. 命令简化和免密"></a>2. 命令简化和免密</h2><p>可以看到每次连接服务器或者拷贝文件都需要输入完整的用户名、ip 之后还要输入密码，非常麻烦</p><p>先使用配置文件来简化命令：</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">vi .ssh/config<br></code></pre></div></td></tr></table></figure><p>这样配置：</p><figure class="highlight crmsh"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs crmsh">Host dns<br>    HostName config.rigerwu.com<br>    <span class="hljs-keyword">User</span> <span class="hljs-title">riger</span><br>    Port <span class="hljs-number">22</span><br></code></pre></div></td></tr></table></figure><p><code>Host</code>后是你给服务器取的别名，我这里用的<code>“dns”</code>，<code>HostName</code>填域名或<code>ip</code>都可以，然后是用户名和端口。</p><p>以后我们直接使用<code>ssh dns</code>就可以访问服务器，名字还可以用<code>tab</code>来代码提示：</p><p><img src="https://riger.oss-cn-shanghai.aliyuncs.com/img/image-20201229143645153.png" alt="image-20201229143645153"></p><p>包括<code>scp</code>命令也可以来简化：</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">scp local_file dns:server_folder<br></code></pre></div></td></tr></table></figure><p>再来做免密登录，使用<code>ssh-copy-id</code>命令吧自己的公钥，拷贝到服务器端的 <code>.ssh/authorized_keys</code>中，这样以后就不用输入密码了：</p><p><img src="https://riger.oss-cn-shanghai.aliyuncs.com/img/image-20201229144130799.png" alt="image-20201229144130799"></p><p>这个再<code>ssh dns</code>就已经可以直接免密登录了：</p><p><img src="https://riger.oss-cn-shanghai.aliyuncs.com/img/image-20201229144411394.png" alt="image-20201229144411394"></p><p>甚至<code>scp</code>命令都能<code>tab</code>提示远程的路径：</p><p><img src="https://riger.oss-cn-shanghai.aliyuncs.com/img/image-20201229144342128.png" alt="image-20201229144342128"></p><p>配合上<code>zsh</code>的代码提示或 alias，常用的文件拷贝就变得非常方便！</p><h2 id="3-解决-SSH-超时中断"><a href="#3-解决-SSH-超时中断" class="headerlink" title="3. 解决 SSH 超时中断"></a>3. 解决 SSH 超时中断</h2><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">vi .ssh/config<br></code></pre></div></td></tr></table></figure><p>这样配置：</p><figure class="highlight apache"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs apache"><span class="hljs-attribute">Host</span> *<br>    <span class="hljs-attribute">TCPKeepAlive</span> yes<br>    <span class="hljs-attribute">ServerAliveInterval</span> <span class="hljs-number">60</span><br>    <span class="hljs-attribute">ServerAliveCountMax</span> <span class="hljs-number">5</span><br></code></pre></div></td></tr></table></figure><p>但是有些服务端还是会一段时间无输入就终端连接，在服务端的<code>.bash_profile</code>中增加一行:</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">export TMOUT=0<br></code></pre></div></td></tr></table></figure><p>设置不限制超时时间，这样就可以保持连接不中断了</p><p>Enjoy it ！</p>]]></content>
    
    
    <categories>
      
      <category>tools</category>
      
    </categories>
    
    
    <tags>
      
      <tag>ssh</tag>
      
      <tag>tools</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>macOS iTerm2 开发环境配置</title>
    <link href="/2020/12/25/macos-iterm2-kai-fa-huan-jing-pei-zhi/"/>
    <url>/2020/12/25/macos-iterm2-kai-fa-huan-jing-pei-zhi/</url>
    
    <content type="html"><![CDATA[<h1 id="macOS-iTerm2-开发环境配置"><a href="#macOS-iTerm2-开发环境配置" class="headerlink" title="macOS iTerm2 开发环境配置"></a>macOS iTerm2 开发环境配置</h1><p><img src="https://riger.oss-cn-shanghai.aliyuncs.com/img/image-20201214140102118.png" alt="image-20201214140102118"></p><blockquote><p>注意：本文很多应用的安装都是走的Github，建议在科学上网环境中进行。</p></blockquote><h2 id="1-iTerm2-安装"><a href="#1-iTerm2-安装" class="headerlink" title="1. iTerm2 安装"></a>1. iTerm2 安装</h2><p>放弃使用系统自带Terminl， 在 <a href="https://iterm2.com/">iTerm2官网</a> 下载安装</p><div align="center"><img src="https://riger.oss-cn-shanghai.aliyuncs.com/img/image-20201214135558722.png" alt="image-20201214135558722" style="zoom:50%;" /></div><p>安装后打开，按上图，点击<code>Make iTerm2 Default Term</code>设置为默认终端</p><h2 id="2-安装Homebrew"><a href="#2-安装Homebrew" class="headerlink" title="2. 安装Homebrew"></a>2. 安装Homebrew</h2><p><a href="https://brew.sh/index_zh-cn"><code>Homebrew</code></a>自称是<code>MacOS</code>或<code>Linux</code>缺失的软件包管理器，使用它可以一行命令安装各种开发类工具及应用程序</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">/bin/bash -c &quot;$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install.sh)&quot;<br></code></pre></div></td></tr></table></figure><h2 id="3-安装zsh"><a href="#3-安装zsh" class="headerlink" title="3. 安装zsh"></a>3. 安装zsh</h2><p><code>MacOS</code>自带<code>zsh</code>，不过版本比较老，我们使用<code>homebrew</code>安装最新版，并修改默认<code>shell</code>为自己下载的<code>zsh</code></p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">brew install zsh<br>echo &quot;/usr/local/bin/zsh&quot; | sudo tee -a /etc/shells<br>chsh -s /usr/local/bin/zsh<br></code></pre></div></td></tr></table></figure><h2 id="4-安装ohmyzsh"><a href="#4-安装ohmyzsh" class="headerlink" title="4. 安装ohmyzsh"></a>4. 安装ohmyzsh</h2><p>运行下面的命名即可安装。 <a href="https://github.com/ohmyzsh/ohmyzsh">ohmyzsh官网</a>也可以去看看各种插件和主题。</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">sh -c &quot;$(curl -fsSL https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh)&quot;<br></code></pre></div></td></tr></table></figure><p><code>zsh</code>的配置文件在：<code>~/.zshrc</code>,后面的配置都在这里面，这里假设你会使用<code>vim</code>，不会可自行使用<code>Sublime</code>等编辑器。</p><h2 id="5-字体主题配置"><a href="#5-字体主题配置" class="headerlink" title="5. 字体主题配置"></a>5. 字体主题配置</h2><p>虽然主题这个东西是一个比较个性化的东西，但是我还是要隆重推荐一下<code>Grovbox</code>主题，我 的<code>IDE</code>、<code>iTerm</code> 和 <code>Vim</code>都用的这个主题:</p><p>Github 下载 iTerm2 的 <a href="https://github.com/AmmarCodes/gruvbox-material-iterm2">gruvbox-material</a> 主题, 双击安装</p><p>打开设置, Profiles, Default, Colors, 选择 <code>grovbox-material</code></p><p>安装Fira字体, 及其对应Nerd版(配合devicons使用)</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">brew tap homebrew/cask-fonts<br>// 这个是给idea, vscode之类用<br>brew cask install font-fira-code<br>// iTerm2 vim 专用<br>brew cask install font-fira-code-nerd-font<br></code></pre></div></td></tr></table></figure><p>打开<code>iTerm2</code>设置, Profiles, Default, Font,  选择 <code>Fira Code Nerd</code></p><p>参考ohmyzsh提供的这些 <a href="https://github.com/ohmyzsh/ohmyzsh/wiki/themes">主题</a>可以选一个自己喜欢的, 推荐agnoster</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">cd ~/Downloads<br>git clone https://github.com/fcamblor/oh-my-zsh-agnoster-fcamblor.git<br>cd oh-my-zsh-agnoster-fcamblor/<br>./install<br>vi .zshrc<br>ZSH_THEME=&quot;agnoster&quot;<br></code></pre></div></td></tr></table></figure><p>去掉路径中的用户名，设置<code>DEFAULT_USER</code>和你的用户名一直即可:</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"> .zshrc 里增加：</span><br>DEFAULT_USER=&quot;riger&quot;<br></code></pre></div></td></tr></table></figure><h2 id="6-插件安装及配置"><a href="#6-插件安装及配置" class="headerlink" title="6. 插件安装及配置"></a>6. 插件安装及配置</h2><p>安装一些好用的插件:</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">brew install autojump<br>git clone git://github.com/zsh-users/zsh-autosuggestions $ZSH_CUSTOM/plugins/zsh-autosuggestions<br>git clone git://github.com/zsh-users/zsh-syntax-highlighting $ZSH_CUSTOM/plugins/zsh-syntax-highlighting<br><br>vi .zshrc<br><span class="hljs-meta">#</span><span class="bash"> 修改如下</span><br>plugins=(<br>    git <br>    sublime<br>    zsh-autosuggestions<br>    autojump<br>    zsh-syntax-highlighting<br>)<br></code></pre></div></td></tr></table></figure><p>简单说明一下我开启的这些插件：</p><ul><li><code>git</code>: 默认就开启的，可以看到文章第一张图，路径上即可显示当前分支是在<code>Master</code>，还有很多方便使用的<code>alias</code></li></ul><p>我常用的有：</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">ga=&#x27;git add&#x27;<br>gst=&#x27;git status&#x27;<br>gcmsg=&#x27;git commit -m&#x27;<br>glola=&#x27;git log --graph --pretty=&#x27;\&#x27;&#x27;%Cred%h%Creset -%C(auto)%d%Creset %s %Cgreen(%cr) %C(bold blue)&lt;%an&gt;%Creset&#x27;\&#x27;&#x27; --all&#x27;<br><span class="hljs-meta">#</span><span class="bash"> 命令行输入 <span class="hljs-built_in">alias</span> 即可看到所有的<span class="hljs-built_in">alias</span></span><br></code></pre></div></td></tr></table></figure><ul><li><p><code>sublime</code>：<code>st 文件或路径</code>  使用<code>sublime</code>打开文件或路径；<code>stt</code> 打开当前路径</p></li><li><p><code>zsh-autosuggestions</code>：命令提示，用过的命令，按方向→自动完成</p></li></ul><p><img src="https://riger.oss-cn-shanghai.aliyuncs.com/img/image-20201227231810507.png" alt="image-20201227231810507"></p><ul><li><code>autojump</code>: <code>j + 关键字</code> 进入你最近去过的含关键字的路径，比如我进过<code>jdk</code>的路径，以后只要输入：</li></ul><figure class="highlight sh"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sh">j jdk<br></code></pre></div></td></tr></table></figure><p>就可以回到<code>jdk</code>路径，是不是很方便？</p><p><img src="https://riger.oss-cn-shanghai.aliyuncs.com/img/image-20201227232454896.png" alt="image-20201227232454896"></p><ul><li><code>zsh-syntax-highlighting</code>: <code>shell</code> 命令高亮，没有人能拒绝高亮。</li></ul><p><img src="https://riger.oss-cn-shanghai.aliyuncs.com/img/image-20201228101251109.png" alt="image-20201228101251109"></p><h2 id="7-其他"><a href="#7-其他" class="headerlink" title="7. 其他"></a>7. 其他</h2><p>以后开发相关的配置都是放在<code>.zshrc</code>中的，比如<code>PATH</code>配置，一些脚本参数配置等。</p><p>还可以自行配置<code>Alias</code> 方便自己的使用，比如我配置的一些：</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">alias py3=&quot;python3&quot;<br>alias openapk=&quot;open -a Finder app/build/outputs/apk&quot;<br>alias releaseapp=&quot;./gradlew assemblerelease&quot;<br>alias sqllogin=&quot;mysql -uroot -p123456&quot;<br>alias redisstart=&quot;redis-server /usr/local/etc/redis.conf&quot;<br>alias logcasher=&quot;pidcat net.worthtech.worthcasher&quot;<br>alias showAct=&quot;adb shell dumpsys activity top | grep ACTIVITY&quot;<br>alias starttom=&quot;~/Library/tomcat/bin/startup.sh&quot;<br>alias stoptom=&quot;~/Library/tomcat/bin/shutdown.sh&quot;<br>alias signapk=&quot;signtest app/build/outputs/apk/release/app-release-unsigned.apk&quot;<br>alias jmeter=&quot;~/dev/apache-jmeter-5.3/bin/jmeter&quot;<br>alias uninstallcasher=&quot;adb shell pm uninstall -k net.worthtech.worthcasher&quot;<br></code></pre></div></td></tr></table></figure><p>配置完后不要忘记让配置生效：</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">source .zshrc<br></code></pre></div></td></tr></table></figure><p>Enjoy it !</p>]]></content>
    
    
    <categories>
      
      <category>tools</category>
      
    </categories>
    
    
    <tags>
      
      <tag>iTerm2</tag>
      
      <tag>macOS</tag>
      
      <tag>zsh</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
