<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Spring Boot Admin 应用监控</title>
    <link href="/2021/01/28/web-admin/"/>
    <url>/2021/01/28/web-admin/</url>
    
    <content type="html"><![CDATA[<h1 id="Spring-Boot-Admin-应用监控"><a href="#Spring-Boot-Admin-应用监控" class="headerlink" title="Spring Boot Admin 应用监控"></a>Spring Boot Admin 应用监控</h1><h2 id="1-简介"><a href="#1-简介" class="headerlink" title="1. 简介"></a>1. 简介</h2><p><a href="https://github.com/codecentric/spring-boot-admin">Spring Boot Admin</a> 可以帮助我们非常方便得查看应用的：</p><ul><li>健康信息</li><li>内存指标</li><li>日志信息</li><li>JVM 系统变量和环境变量</li><li>线程和堆栈信息</li><li>等等</li></ul><p>还能进行状态通知用于告警，集成非常简单，简单又好用。</p><h2 id="2-集成"><a href="#2-集成" class="headerlink" title="2. 集成"></a>2. 集成</h2><p>Admin 需要单独部署一个微服务，作为 Server 端，并提供 UI 的后台服务，然后我们的应用接入Server即可。</p><h3 id="Server"><a href="#Server" class="headerlink" title="Server"></a>Server</h3><p>新建一个 <code>admin-server</code>, pom 引入 amdin 依赖，最新版本在<a href="https://github.com/codecentric/spring-boot-admin/releases">这里</a>查：</p><figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--    admin server    --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>de.codecentric<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-admin-starter-server<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>$&#123;spring.boot.admin.version&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-security<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></div></td></tr></table></figure><p>yml 配置：</p><figure class="highlight yaml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs yaml"><span class="hljs-attr">server:</span><br>  <span class="hljs-attr">port:</span> <span class="hljs-number">8000</span><br><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">security:</span><br>    <span class="hljs-attr">user:</span><br>      <span class="hljs-attr">name:</span> <span class="hljs-string">riger</span><br>      <span class="hljs-attr">password:</span> <span class="hljs-string">riger</span><br></code></pre></div></td></tr></table></figure><p>Security 配置，主要是为了增加密码登录：</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.rigerwu.web.admin.server.config;<br><br><span class="hljs-keyword">import</span> de.codecentric.boot.admin.server.config.AdminServerProperties;<br><span class="hljs-keyword">import</span> org.springframework.context.annotation.Configuration;<br><span class="hljs-keyword">import</span> org.springframework.security.config.annotation.web.builders.HttpSecurity;<br><span class="hljs-keyword">import</span> org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;<br><span class="hljs-keyword">import</span> org.springframework.security.web.authentication.SavedRequestAwareAuthenticationSuccessHandler;<br><span class="hljs-keyword">import</span> org.springframework.security.web.csrf.CookieCsrfTokenRepository;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * created by riger on 2021/1/28</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Configuration</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">WebSecurityConfig</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">WebSecurityConfigurerAdapter</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> String adminContextPath;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">WebSecurityConfig</span><span class="hljs-params">(AdminServerProperties adminServerProperties)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.adminContextPath = adminServerProperties.getContextPath();<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">configure</span><span class="hljs-params">(HttpSecurity http)</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;<br>        SavedRequestAwareAuthenticationSuccessHandler successHandler = <span class="hljs-keyword">new</span> SavedRequestAwareAuthenticationSuccessHandler();<br>        successHandler.setTargetUrlParameter(<span class="hljs-string">&quot;redirectTo&quot;</span>);<br>        successHandler.setDefaultTargetUrl(adminContextPath + <span class="hljs-string">&quot;/&quot;</span>);<br><br>        http.authorizeRequests()<br>                <span class="hljs-comment">//1.配置所有静态资源和登录页可以公开访问</span><br>                .antMatchers(adminContextPath + <span class="hljs-string">&quot;/assets/**&quot;</span>).permitAll()<br>                .antMatchers(adminContextPath + <span class="hljs-string">&quot;/login&quot;</span>).permitAll()<br>                .anyRequest().authenticated()<br>                .and()<br>                <span class="hljs-comment">//2.配置登录和登出路径</span><br>                .formLogin().loginPage(adminContextPath + <span class="hljs-string">&quot;/login&quot;</span>).successHandler(successHandler).and()<br>                .logout().logoutUrl(adminContextPath + <span class="hljs-string">&quot;/logout&quot;</span>).and()<br>                <span class="hljs-comment">//3.开启http basic支持，admin-client注册时需要使用</span><br>                .httpBasic().and()<br>                .csrf()<br>                <span class="hljs-comment">//4.开启基于cookie的csrf保护</span><br>                .csrfTokenRepository(CookieCsrfTokenRepository.withHttpOnlyFalse())<br>                <span class="hljs-comment">//5.忽略这些路径的csrf保护以便admin-client注册</span><br>                .ignoringAntMatchers(<br>                        adminContextPath + <span class="hljs-string">&quot;/instances&quot;</span>,<br>                        adminContextPath + <span class="hljs-string">&quot;/actuator/**&quot;</span><br>                );<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>最后在 Application 上开启：<code>@EnableAdminServer</code></p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-meta">@SpringBootApplication</span><br><span class="hljs-meta">@EnableAdminServer</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">AdminServerApplication</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span></span>&#123;<br>        SpringApplication.run(AdminServerApplication.class, args);<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>启动Server，然后访问：<a href="http://localhost:8000/">http://localhost:8000</a></p><img src="https://riger.oss-cn-shanghai.aliyuncs.com/img/image-20210128154955409.png" alt="image-20210128154955409" style="zoom:67%;" /><h3 id="Client"><a href="#Client" class="headerlink" title="Client"></a>Client</h3><p>引入依赖：</p><figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--    admin client    --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>de.codecentric<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-admin-starter-client<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>$&#123;spring.boot.admin.version&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></div></td></tr></table></figure><p>配置文件，由于我们 Server 配置了账号密码，所以客户端也要配置，才能接入 Server：</p><figure class="highlight yaml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs yaml"><span class="hljs-attr">server:</span><br>  <span class="hljs-attr">port:</span> <span class="hljs-number">8080</span><br><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">application:</span><br>    <span class="hljs-attr">name:</span> <span class="hljs-string">admin-client</span><br>  <span class="hljs-attr">boot:</span><br>    <span class="hljs-attr">admin:</span><br>      <span class="hljs-attr">client:</span><br>        <span class="hljs-attr">url:</span> <span class="hljs-string">http://localhost:8000</span><br>        <span class="hljs-attr">username:</span> <span class="hljs-string">riger</span><br>        <span class="hljs-attr">password:</span> <span class="hljs-string">riger</span><br>        <span class="hljs-comment"># 实际部署使用的时候可能获取的应用host不正确,需要手动指定</span><br>        <span class="hljs-attr">instance:</span><br>          <span class="hljs-attr">service-base-url:</span> <span class="hljs-string">http://localhost:$&#123;server.port&#125;</span><br><br><span class="hljs-attr">management:</span><br>  <span class="hljs-attr">endpoints:</span><br>    <span class="hljs-attr">web:</span><br>      <span class="hljs-attr">exposure:</span><br>        <span class="hljs-attr">include:</span> <span class="hljs-string">&#x27;*&#x27;</span><br>  <span class="hljs-attr">endpoint:</span><br>    <span class="hljs-attr">health:</span><br>      <span class="hljs-attr">show-details:</span> <span class="hljs-string">always</span><br><br><span class="hljs-attr">logging:</span><br>  <span class="hljs-attr">file:</span><br>    <span class="hljs-attr">name:</span> <span class="hljs-string">logs/client.log</span> <span class="hljs-comment"># 要配置log文件名,才能在Admin里查看log</span><br></code></pre></div></td></tr></table></figure><p>再启动客户端</p><h2 id="3-使用"><a href="#3-使用" class="headerlink" title="3. 使用"></a>3. 使用</h2><p>我们使用预设的账号密码：riger/riger 登录：</p><p><img src="https://riger.oss-cn-shanghai.aliyuncs.com/img/image-20210128155041985.png" alt="image-20210128155041985"></p><p>可以看到我们的应用已经注册在 Admin 中，点击可以查看详细信息：</p><p><img src="https://riger.oss-cn-shanghai.aliyuncs.com/img/image-20210128155822906.png" alt="image-20210128155822906"></p><p><img src="https://riger.oss-cn-shanghai.aliyuncs.com/img/image-20210128155414534.png" alt="image-20210128155414534"></p><p><img src="https://riger.oss-cn-shanghai.aliyuncs.com/img/image-20210128155716702.png" alt="image-20210128155716702"></p><p><img src="https://riger.oss-cn-shanghai.aliyuncs.com/img/image-20210128155456504.png" alt="image-20210128155456504"></p><p>还能直接查看到应用 log，并可以下载 log：</p><p><img src="https://riger.oss-cn-shanghai.aliyuncs.com/img/image-20210128155549594.png" alt="image-20210128155549594"></p><p>非常强大且方便</p><h2 id="4-邮件告警"><a href="#4-邮件告警" class="headerlink" title="4. 邮件告警"></a>4. 邮件告警</h2><p>这里简单介绍一下邮件告警的配置使用, Server 引入：</p><figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-mail<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></div></td></tr></table></figure><p>增加邮件配置，可配置多个通知邮箱，用 <code>,</code>隔开：</p><figure class="highlight yaml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs yaml"><span class="hljs-attr">server:</span><br>  <span class="hljs-attr">port:</span> <span class="hljs-number">8000</span><br><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">security:</span><br>    <span class="hljs-attr">user:</span><br>      <span class="hljs-attr">name:</span> <span class="hljs-string">riger</span><br>      <span class="hljs-attr">password:</span> <span class="hljs-string">riger</span><br>  <span class="hljs-attr">mail:</span><br>    <span class="hljs-attr">host:</span> <span class="hljs-string">smtp.qiye.163.com</span><br>    <span class="hljs-attr">port:</span> <span class="hljs-number">465</span><br>    <span class="hljs-attr">username:</span> <span class="hljs-string">yourmail@163.com</span><br>    <span class="hljs-attr">password:</span> <span class="hljs-string">password</span><br>    <span class="hljs-attr">protocol:</span> <span class="hljs-string">smtp</span><br>    <span class="hljs-attr">test-connection:</span> <span class="hljs-literal">true</span><br>    <span class="hljs-attr">default-encoding:</span> <span class="hljs-string">UTF-8</span><br>    <span class="hljs-attr">properties:</span><br>      <span class="hljs-attr">mail.smtp.auth:</span> <span class="hljs-literal">true</span><br>      <span class="hljs-attr">mail.smtp.ssl.enable:</span> <span class="hljs-literal">true</span><br><br>  <span class="hljs-attr">boot:</span><br>    <span class="hljs-attr">admin:</span><br>      <span class="hljs-attr">notify:</span><br>        <span class="hljs-attr">mail:</span><br>          <span class="hljs-comment"># from 163邮箱必须要配置，否则报503，别的邮箱没测</span><br>          <span class="hljs-attr">from:</span> <span class="hljs-string">yourmail@163.com</span><br>          <span class="hljs-attr">to:</span> <span class="hljs-string">mail1@163.com,mail2@163.com</span><br></code></pre></div></td></tr></table></figure><p>我们重启 Server，然后关掉我们的 Client 后，收到了邮件：</p><p><img src="https://riger.oss-cn-shanghai.aliyuncs.com/img/image-20210128160802389.png" alt="image-20210128160802389"></p><p>好了，Spring Boot Admin 就介绍到这，希望有所帮助。</p><p>源码及脚本都在<a href="https://github.com/RigerWu/web-starter-demos">Github</a>上</p><p>Enjoy it!</p><h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><ul><li><a href="https://codecentric.github.io/spring-boot-admin/2.3.1/#getting-started">Spring Boot Admin Document</a></li></ul>]]></content>
    
    
    <categories>
      
      <category>spring boot</category>
      
    </categories>
    
    
    <tags>
      
      <tag>admin</tag>
      
      <tag>tool</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SpringBoot中使用RabbitMQ详解</title>
    <link href="/2021/01/27/web-rabbitmq/"/>
    <url>/2021/01/27/web-rabbitmq/</url>
    
    <content type="html"><![CDATA[<h1 id="SpringBoot-中使用-RabbitMQ-详解"><a href="#SpringBoot-中使用-RabbitMQ-详解" class="headerlink" title="SpringBoot 中使用 RabbitMQ 详解"></a>SpringBoot 中使用 RabbitMQ 详解</h1><h2 id="1-简介"><a href="#1-简介" class="headerlink" title="1. 简介"></a>1. 简介</h2><p>消息队列在后端应用中的作用主要有三点：</p><ol><li>解耦：可以用消息队列来解耦及时性要求不高的业务，让系统更灵活</li><li>异步：异步处理重要性不高的业务逻辑，加快响应速度，比如注册时发邮件、发短信等</li><li>削峰：对于有突发性大流量的业务，可以用消息中间件来削峰，挤压的请求放在消息队列，消费者慢慢处理</li></ol><p>常见的消息中间件有：</p><p>ActiveMQ、RabbitMQ、RocketMQ、Kafka</p><ul><li><p>其中 ActiveMQ 比较老，已经基本没人用了，不推荐使用</p></li><li><p>RabbitMQ 社区活跃，使用人数很多，缺点是使用 erlang 语言开发的，不利于Java程序员定制开发，推荐小企业使用</p></li><li><p>RocketMQ 是阿里开源的，基于Java语言，但是社区活跃度一般，可能哪天就不维护了，适用于技术实力强的企业</p></li><li><p>Kafka 适合涉及实时计算和日志采集等场景使用，天然支持分布式，是业界标准</p></li></ul><p>今天我们主要讲解的是 RabbitMQ</p><h2 id="2-基本概念"><a href="#2-基本概念" class="headerlink" title="2. 基本概念"></a>2. 基本概念</h2><p>RabbitMQ 实现了 AMQP（Advanced Message Queuing Protocol）协议，下面来简单介绍下 AMQP 模型中的几个概念</p><table><thead><tr><th align="center">名词</th><th align="center">翻译</th><th align="center">解释</th></tr></thead><tbody><tr><td align="center">Message</td><td align="center">消息</td><td align="center">由消息头和消息体组成，消息头包括 routing-key、priority、delivery-mode</td></tr><tr><td align="center">Publisher</td><td align="center">生产者</td><td align="center">消息的来源</td></tr><tr><td align="center">Exchange</td><td align="center">交换器</td><td align="center">将生产者消息路由给服务器中的队列，类型有direct(默认)，fanout, topic, 和headers</td></tr><tr><td align="center">Queue</td><td align="center">消息队列</td><td align="center">保存消息直到发送给消费者</td></tr><tr><td align="center">Binding</td><td align="center">绑定</td><td align="center">用于消息队列和交换器之间的关联</td></tr><tr><td align="center">Connection</td><td align="center">连接</td><td align="center">比如一个TCP连接</td></tr><tr><td align="center">Consumer</td><td align="center">消费者</td><td align="center">消息的接收者</td></tr><tr><td align="center">Virtual Host</td><td align="center">虚拟主机</td><td align="center">表示一批交换器、消息队列和相关对象；vhost必须连接时指定；RabbitMQ的vhost默认是/</td></tr><tr><td align="center">Broker</td><td align="center">代理</td><td align="center">消息队列服务器实体</td></tr></tbody></table><p>消息发送简单流程：</p><p><img src="https://riger.oss-cn-shanghai.aliyuncs.com/img/hello-world-example-routing.png" alt="Publish path from publisher to consumer via exchange and queue"></p><p>如图，<code>Publisher</code> 产出的消息发送到 <code>Exchange</code> , <code>Exchange</code>根据路由规则将消息发送到对应的队列 <code>Queue</code>，<code>Consumer</code>最后从队列中获取到消息</p><p>Exchange类型：</p><ol><li>direct</li></ol><p>点对点模式，消息中的路由键（routing key）如果和 Binding 中的 bindingkey 一致， 交换器就将消息发到对应的队列中。</p><ol start="2"><li>fanout</li></ol><p>广播模式，每个发到 fanout 类型交换器的消息都会分到所有绑定的队列上去</p><ol start="3"><li>topic</li></ol><p>将路由键和某个模式进行匹配，此时队列需要绑定到一个模式上。它将路由键和绑定键的字符串切分成单词，这些单词之间用点隔开。<br>识别通配符： # 匹配 0 个或多个单词， *匹配一个单词</p><ol start="4"><li><p>Headers</p><p>匹配消息内容中的 headers 属性，性能很差，不适用，基本看不到它的使用</p></li></ol><p>routingkey 与 bindingkey 这两个概念比较容易混淆，这里详细解析下：</p><p>Exchange 和 Queue 都可以独立创建，创建完后是没有联系的。而上面提过消息是由 Exchange 分发到 Queue 的，所以我们要把 Exchange 与 Queue绑定，绑定的时候则必须<strong>指定 bindingkey</strong>。比如我们 绑定一个 Queue 到一个 topic Exchange，指定路由键为 <code>com.#</code>。我们发消息到 MQ 的时候必须<strong>指定 routingkey</strong>，比如我们指定一个 <code>com.rigerwu</code>就能匹配之前的 bindingkey，这条消息就能发送到这个 Queue。</p><h2 id="3-安装与配置"><a href="#3-安装与配置" class="headerlink" title="3. 安装与配置"></a>3. 安装与配置</h2><p>我写这篇文章的时候 RabbitMQ最新版本为：3.8.11</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash"><span class="hljs-comment"># 我们使用带管理界面的镜像</span><br>docker pull rabbitmq:3-management<br>docker run -d --name rabbitmq -p 5672:5672 -p 15672:15672 rabbitmq:3-management<br></code></pre></div></td></tr></table></figure><p>默认的用户密码是：guest/guest</p><p>如果想改密码：（当然，因为我们使用的是<code>management</code>镜像，可以直接从界面的 <code>Admin</code> 标签里操作，这里记录一下命令行操作方式）</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash"><span class="hljs-comment"># 进入容器</span><br>docker <span class="hljs-built_in">exec</span> -it rabbitmq /bin/bash<br><span class="hljs-comment"># 查看用户</span><br>rabbitmqctl list_users<br><span class="hljs-comment"># 修改密码</span><br>rabbitmqctl change_password userName newPassword<br><span class="hljs-comment"># 新增用户</span><br>rabbitmqctl add_user userName newPassword<br><span class="hljs-comment"># 删除用户</span><br>rabbitmqctl delete_user guest<br><span class="hljs-comment"># 设置自己账号为超级管理员</span><br>rabbitmqctl set_user_tags userName administrator<br></code></pre></div></td></tr></table></figure><p>依赖引入：</p><figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-amqp<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></div></td></tr></table></figure><blockquote><p>使用 AmqpAdmin 可以声明 Exchange、Queue 以及它们的 Binding </p><p>使用 RabbitTemplate 可以很方便得收发消息</p></blockquote><p>配置文件，这里我们使用一个 SpringBoot 工程来演示即可:</p><figure class="highlight yaml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs yaml"><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">application:</span><br>    <span class="hljs-attr">name:</span> <span class="hljs-string">web-rabbitmq</span><br>  <span class="hljs-attr">rabbitmq:</span><br>    <span class="hljs-attr">addresses:</span> <span class="hljs-string">localhost</span><br>    <span class="hljs-attr">port:</span> <span class="hljs-number">5672</span> <span class="hljs-comment"># 默认值可不填</span><br>    <span class="hljs-attr">username:</span> <span class="hljs-string">guest</span> <span class="hljs-comment"># 默认值可不填</span><br>    <span class="hljs-attr">password:</span> <span class="hljs-string">guest</span> <span class="hljs-comment"># 默认值可不填</span><br>    <span class="hljs-attr">virtual-host:</span> <span class="hljs-string">/</span> <span class="hljs-comment"># 默认值可不填</span><br></code></pre></div></td></tr></table></figure><h2 id="4-几种Exchange测试"><a href="#4-几种Exchange测试" class="headerlink" title="4. 几种Exchange测试"></a>4. 几种Exchange测试</h2><p>我们创建3种 Exchange，3个 Queue，diret 直接用队列名作为 bindingkey，topic 分别用三种bindingkey绑定，如图所示：</p><p><img src="https://riger.oss-cn-shanghai.aliyuncs.com/img/web-rabbitmq-1717482.png" alt="web-rabbitmq"></p><p>我们定义一个常量类：</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.rigerwu.web.rabbitmq.constants;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * created by riger on 2021/1/25</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">MQConsts</span> </span>&#123;<br><br>    String DIRECT_EXCHANGE = <span class="hljs-string">&quot;direct-exchange&quot;</span>;<br>    String FANOUT_EXCHANGE = <span class="hljs-string">&quot;fanout-exchange&quot;</span>;<br>    String TOPIC_EXCHANGE = <span class="hljs-string">&quot;topic-exchange&quot;</span>;<br><br>    String QUEUE1 = <span class="hljs-string">&quot;queue1&quot;</span>;<br>    String QUEUE2 = <span class="hljs-string">&quot;queue2&quot;</span>;<br>    String QUEUE3 = <span class="hljs-string">&quot;queue3&quot;</span>;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * * 一个占位符 #一个或者多个占位符</span><br><span class="hljs-comment">     */</span><br>    String QUEUE_ROUTING_KEY1 = <span class="hljs-string">&quot;*.queue&quot;</span>;<br>    String QUEUE_ROUTING_KEY2 = <span class="hljs-string">&quot;#.queue&quot;</span>;<br>    String QUEUE_ROUTING_KEY3 = <span class="hljs-string">&quot;com.#&quot;</span>;<br><br>&#125;<br></code></pre></div></td></tr></table></figure><p>定义一个配置文件，这是用来声明和绑定队列，也可以在 rabbitmq管理界面里做，代码做的好处是，如果没有会自动创建</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.rigerwu.web.rabbitmq.config;<br><br><span class="hljs-keyword">import</span> com.rigerwu.web.rabbitmq.constants.MQConsts;<br><span class="hljs-keyword">import</span> lombok.extern.slf4j.Slf4j;<br><span class="hljs-keyword">import</span> org.springframework.amqp.core.*;<br><span class="hljs-keyword">import</span> org.springframework.amqp.support.converter.Jackson2JsonMessageConverter;<br><span class="hljs-keyword">import</span> org.springframework.amqp.support.converter.MessageConverter;<br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Autowired;<br><span class="hljs-keyword">import</span> org.springframework.context.annotation.Bean;<br><span class="hljs-keyword">import</span> org.springframework.context.annotation.Configuration;<br><br><span class="hljs-keyword">import</span> javax.annotation.PostConstruct;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * created by riger on 2021/1/25</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Configuration</span><br><span class="hljs-meta">@Slf4j</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MQConfig</span> </span>&#123;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> AmqpAdmin amqpAdmin;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 消息使用Json转换</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> MessageConverter <span class="hljs-title">messageConverter</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> Jackson2JsonMessageConverter();<br>    &#125;<br><br>    <span class="hljs-meta">@PostConstruct</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">init</span><span class="hljs-params">()</span> </span>&#123;<br>        DirectExchange direct = <span class="hljs-keyword">new</span> DirectExchange(MQConsts.DIRECT_EXCHANGE);<br>        FanoutExchange fanout = <span class="hljs-keyword">new</span> FanoutExchange(MQConsts.FANOUT_EXCHANGE);<br>        TopicExchange topic = <span class="hljs-keyword">new</span> TopicExchange(MQConsts.TOPIC_EXCHANGE);<br>        amqpAdmin.declareExchange(direct);<br>        amqpAdmin.declareExchange(fanout);<br>        amqpAdmin.declareExchange(topic);<br>        Queue queue1 = <span class="hljs-keyword">new</span> Queue(MQConsts.QUEUE1);<br>        Queue queue2 = <span class="hljs-keyword">new</span> Queue(MQConsts.QUEUE2);<br>        Queue queue3 = <span class="hljs-keyword">new</span> Queue(MQConsts.QUEUE3);<br>        amqpAdmin.declareQueue(queue1);<br>        amqpAdmin.declareQueue(queue2);<br>        amqpAdmin.declareQueue(queue3);<br>        <span class="hljs-comment">// direct 这里偷懒直接用队列名作为 BindingKey</span><br>        amqpAdmin.declareBinding(BindingBuilder.bind(queue1).to(direct).with(MQConsts.QUEUE1));<br>        amqpAdmin.declareBinding(BindingBuilder.bind(queue2).to(direct).with(MQConsts.QUEUE2));<br>        amqpAdmin.declareBinding(BindingBuilder.bind(queue3).to(direct).with(MQConsts.QUEUE3));<br>        <span class="hljs-comment">// fanout 可以看到 fanout exchange 绑定不需要 bindingkey</span><br>        amqpAdmin.declareBinding(BindingBuilder.bind(queue1).to(fanout));<br>        amqpAdmin.declareBinding(BindingBuilder.bind(queue2).to(fanout));<br>        amqpAdmin.declareBinding(BindingBuilder.bind(queue3).to(fanout));<br>        <span class="hljs-comment">// topic</span><br>        amqpAdmin.declareBinding(BindingBuilder.bind(queue1).to(topic).with(MQConsts.QUEUE_ROUTING_KEY1));<br>        amqpAdmin.declareBinding(BindingBuilder.bind(queue2).to(topic).with(MQConsts.QUEUE_ROUTING_KEY2));<br>        amqpAdmin.declareBinding(BindingBuilder.bind(queue3).to(topic).with(MQConsts.QUEUE_ROUTING_KEY3));<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>定义一个简单的消息实体类：</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.rigerwu.web.rabbitmq.entity;<br><br><span class="hljs-keyword">import</span> lombok.AllArgsConstructor;<br><span class="hljs-keyword">import</span> lombok.Data;<br><span class="hljs-keyword">import</span> lombok.NoArgsConstructor;<br><br><span class="hljs-keyword">import</span> java.io.Serializable;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * created by riger on 2021/1/25</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Data</span><br><span class="hljs-meta">@AllArgsConstructor</span><br><span class="hljs-meta">@NoArgsConstructor</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MsgBean</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Serializable</span> </span>&#123;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">long</span> serialVersionUID = -<span class="hljs-number">1248468460780960866L</span>;<br>    <span class="hljs-keyword">private</span> String msgDesc;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>为每个队列关联一个接收者，打印消息：</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.rigerwu.web.rabbitmq.service;<br><br><span class="hljs-keyword">import</span> cn.hutool.json.JSONUtil;<br><span class="hljs-keyword">import</span> com.rigerwu.web.rabbitmq.constants.MQConsts;<br><span class="hljs-keyword">import</span> com.rigerwu.web.rabbitmq.entity.MsgBean;<br><span class="hljs-keyword">import</span> lombok.extern.slf4j.Slf4j;<br><span class="hljs-keyword">import</span> org.springframework.amqp.rabbit.annotation.RabbitHandler;<br><span class="hljs-keyword">import</span> org.springframework.amqp.rabbit.annotation.RabbitListener;<br><span class="hljs-keyword">import</span> org.springframework.stereotype.Service;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * created by riger on 2021/1/25</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Service</span><br><span class="hljs-meta">@Slf4j</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">QueueListener</span> </span>&#123;<br><br>    <span class="hljs-meta">@RabbitListener(queues = MQConsts.QUEUE1)</span><br>    <span class="hljs-meta">@RabbitHandler</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">receiveQueue1</span><span class="hljs-params">(MsgBean msgBean)</span> </span>&#123;<br>        log.info(<span class="hljs-string">&quot;queue1 receive msg -&gt; :&quot;</span> + JSONUtil.toJsonStr(msgBean));<br>    &#125;<br><br>    <span class="hljs-meta">@RabbitListener(queues = MQConsts.QUEUE2)</span><br>    <span class="hljs-meta">@RabbitHandler</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">receiveQueue2</span><span class="hljs-params">(MsgBean msgBean)</span> </span>&#123;<br>        log.info(<span class="hljs-string">&quot;queue2 receive msg -&gt; :&quot;</span> + JSONUtil.toJsonStr(msgBean));<br>    &#125;<br><br>    <span class="hljs-meta">@RabbitListener(queues = MQConsts.QUEUE3)</span><br>    <span class="hljs-meta">@RabbitHandler</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">receiveQueue3</span><span class="hljs-params">(MsgBean msgBean)</span> </span>&#123;<br>        log.info(<span class="hljs-string">&quot;queue3 receive msg -&gt; :&quot;</span> + JSONUtil.toJsonStr(msgBean));<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>最后我们写一个 Controller 来测试：</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.rigerwu.web.rabbitmq.controller;<br><br><span class="hljs-keyword">import</span> cn.hutool.core.thread.ThreadUtil;<br><span class="hljs-keyword">import</span> com.rigerwu.web.rabbitmq.constants.MQConsts;<br><span class="hljs-keyword">import</span> com.rigerwu.web.rabbitmq.entity.MsgBean;<br><span class="hljs-keyword">import</span> lombok.extern.slf4j.Slf4j;<br><span class="hljs-keyword">import</span> org.springframework.amqp.rabbit.connection.CorrelationData;<br><span class="hljs-keyword">import</span> org.springframework.amqp.rabbit.core.RabbitTemplate;<br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Autowired;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.GetMapping;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.RestController;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * created by riger on 2021/1/12</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@RestController</span><br><span class="hljs-meta">@Slf4j</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MessageController</span> </span>&#123;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> RabbitTemplate rabbitTemplate;<br><br>    <span class="hljs-meta">@GetMapping(&quot;/direct&quot;)</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">directMessage</span><span class="hljs-params">()</span> </span>&#123;<br>        rabbitTemplate.convertAndSend(MQConsts.DIRECT_EXCHANGE, <span class="hljs-string">&quot;queue1&quot;</span>, <span class="hljs-keyword">new</span> MsgBean(<span class="hljs-string">&quot;direct message 1&quot;</span>));<br>        rabbitTemplate.convertAndSend(MQConsts.DIRECT_EXCHANGE, <span class="hljs-string">&quot;queue2&quot;</span>, <span class="hljs-keyword">new</span> MsgBean(<span class="hljs-string">&quot;direct message 2&quot;</span>));<br>        rabbitTemplate.convertAndSend(MQConsts.DIRECT_EXCHANGE, <span class="hljs-string">&quot;queue3&quot;</span>, <span class="hljs-keyword">new</span> MsgBean(<span class="hljs-string">&quot;direct message 3&quot;</span>));<br>        rabbitTemplate.convertAndSend(MQConsts.DIRECT_EXCHANGE, <span class="hljs-string">&quot;queue4&quot;</span>, <span class="hljs-keyword">new</span> MsgBean(<span class="hljs-string">&quot;direct message 4&quot;</span>));<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;OK&quot;</span>;<br>    &#125;<br><br>    <span class="hljs-meta">@GetMapping(&quot;/fanout&quot;)</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">fanoutMessage</span><span class="hljs-params">()</span> </span>&#123;<br>        rabbitTemplate.convertAndSend(MQConsts.FANOUT_EXCHANGE, <span class="hljs-string">&quot;xxx&quot;</span>, <span class="hljs-keyword">new</span> MsgBean(<span class="hljs-string">&quot;fanout message&quot;</span>));<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;OK&quot;</span>;<br>    &#125;<br><br>    <span class="hljs-meta">@GetMapping(&quot;/topic&quot;)</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">topicMessage</span><span class="hljs-params">()</span> </span>&#123;<br><br>        log.info(<span class="hljs-string">&quot;queue1 bindingkey: *.queue&quot;</span>);<br>        log.info(<span class="hljs-string">&quot;queue2 bindingkey: #.queue&quot;</span>);<br>        log.info(<span class="hljs-string">&quot;queue3 bindingkey: com.#&quot;</span>);<br><br>        String routingKey1 = <span class="hljs-string">&quot;test.queue&quot;</span>;<br>        String routingKey2 = <span class="hljs-string">&quot;com.riger.queue&quot;</span>;<br>        String routingKey3 = <span class="hljs-string">&quot;com.queue&quot;</span>;<br>        rabbitTemplate.convertAndSend(MQConsts.TOPIC_EXCHANGE, routingKey1,<br>                <span class="hljs-keyword">new</span> MsgBean(<span class="hljs-string">&quot;topic message routingkey: &quot;</span>+ routingKey1));<br>        ThreadUtil.sleep(<span class="hljs-number">1000</span>);<br>        log.info(<span class="hljs-string">&quot;----------------------------------------------&quot;</span>);<br>        rabbitTemplate.convertAndSend(MQConsts.TOPIC_EXCHANGE, routingKey2,<br>                <span class="hljs-keyword">new</span> MsgBean(<span class="hljs-string">&quot;topic message routingkey: &quot;</span>+ routingKey2));<br>        ThreadUtil.sleep(<span class="hljs-number">1000</span>);<br>        log.info(<span class="hljs-string">&quot;----------------------------------------------&quot;</span>);<br>        rabbitTemplate.convertAndSend(MQConsts.TOPIC_EXCHANGE, routingKey3,<br>                <span class="hljs-keyword">new</span> MsgBean(<span class="hljs-string">&quot;topic message routingkey: &quot;</span>+ routingKey3));<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;OK&quot;</span>;<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>direct 交换器，分别用 routingkey <code>queue1 queue2 queue3 queue4</code> 发送4条消息：</p><p><img src="https://riger.oss-cn-shanghai.aliyuncs.com/img/image-20210127112529317.png" alt="image-20210127112529317"></p><p>可以看到前3条 routingkey 与 bindingkey 匹配，分别发送到3个队列，第4条则没有匹配，丢失</p><p>fanout 交换器，我们随意指定 <code>xxx</code>的 routingkey 发送一条消息，3个队列都接收到了，符合预期：</p><p><img src="https://riger.oss-cn-shanghai.aliyuncs.com/img/image-20210127113033575.png" alt="image-20210127113033575"></p><p>topic 我们之前给3个队列分别绑定了 <code>*.queue  .queue  com.#</code>三种 bindingkey，发送的时候我们发送的是 <code>test.queue  com.riger.queue  com.queue</code>3种routingkey</p><blockquote><p>这里两种key都要用点 <code>.</code>分隔单词</p><p><code>*</code>匹配一个单词</p><p><code>#</code>匹配0或者多个单词</p></blockquote><p><img src="https://riger.oss-cn-shanghai.aliyuncs.com/img/image-20210127113110375.png" alt="image-20210127113110375"></p><p>可以看到，<code>test.queue</code>能匹配队列1和2，<code>com.riger.queue</code>能匹配2和3，<code>com.queue</code>3个队列都能匹配，符合预期</p><h2 id="5-消息的可靠投递"><a href="#5-消息的可靠投递" class="headerlink" title="5. 消息的可靠投递"></a>5. 消息的可靠投递</h2><p>消息的可靠投递其实说白了就是保证消息不丢，那么就要从三个方面来说：</p><ol><li>生产者不丢</li><li>MQ不丢</li><li>消费者不丢</li></ol><h3 id="1-生产者可靠性"><a href="#1-生产者可靠性" class="headerlink" title="1. 生产者可靠性"></a>1. 生产者可靠性</h3><p>生产者有可能弄丢消息，比如发消息给MQ，发出去，网络有问题，MQ没收到，如果生产者不管了，这条消息就丢了</p><p>要保证生产者发送消息的可靠性，一般有两种方法：</p><ol><li>开启事务</li><li>开启confirm模式</li></ol><p>开启事务会严重降低MQ的吞吐量，生产上不会去使用，一般我们都使用的 confirm 模式</p><p>confirm 开启方法，在生产者服务的 yml 里添加：</p><figure class="highlight yaml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs yaml"><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">rabbitmq:</span><br>    <span class="hljs-comment"># publisher-confirms: true # 这个设置已经过时,使用publisher-confirm-type</span><br>    <span class="hljs-comment"># 开启消息确认可选有 none corelated simple, 消息发送到broker后回调</span><br>    <span class="hljs-attr">publisher-confirm-type:</span> <span class="hljs-string">correlated</span><br>    <span class="hljs-comment"># 消息投递队列失败后回调 returnscallback 要配合mandatory参数使用</span><br>    <span class="hljs-attr">publisher-returns:</span> <span class="hljs-literal">true</span><br>    <span class="hljs-attr">template:</span><br>      <span class="hljs-comment"># false 消息如果发送不到合适的队列会被丢弃</span><br>      <span class="hljs-comment"># true 消息如果发送不到合适的队列会回调 returnscallback</span><br>      <span class="hljs-attr">mandatory:</span> <span class="hljs-literal">true</span><br></code></pre></div></td></tr></table></figure><p><code>publisher-confirm-type</code> 设置 <code>correlated</code> 消息发送到 broker 会有回调，发消息带一个 <code>CorrelationData</code>，回调带回来，用于区分消息<code>publisher-returns</code> 参数，配合 <code>mandatory</code> 可以在消息投递队列的时候有回调，能保证消息到达队列</p><p>然后我们在 <code>MQConfig</code>里设置一下回调监听，实际开发可以根据业务逻辑做相应处理：</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java">rabbitTemplate.setConfirmCallback((correlationData, ack, cause) -&gt; &#123;<br>    <span class="hljs-keyword">if</span> (ack) &#123;<br>        log.info(<span class="hljs-string">&quot;消息发送到broker: &quot;</span> + correlationData);<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        log.error(<span class="hljs-string">&quot;消息发送失败:&quot;</span> + cause);<br>    &#125;<br>&#125;);<br>rabbitTemplate.setReturnsCallback(returned -&gt; log.info(<span class="hljs-string">&quot;消息\&quot;&#123;&#125;\&quot;发送到队列失败:&#123;&#125;&quot;</span>,<br>        <span class="hljs-keyword">new</span> String(returned.getMessage().getBody()),<br>        returned.getReplyText()));<br></code></pre></div></td></tr></table></figure><p>我们再增加一个接口来测试一下回调：</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-meta">@GetMapping(&quot;/direct-confrim&quot;)</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">directConfirm</span><span class="hljs-params">()</span> </span>&#123;<br><br>    CorrelationData data = <span class="hljs-keyword">new</span> CorrelationData();<br>    log.info(<span class="hljs-string">&quot;准备发送消息1-id: &quot;</span> + data.getId());<br>    rabbitTemplate.convertAndSend(MQConsts.DIRECT_EXCHANGE, MQConsts.QUEUE1, <span class="hljs-keyword">new</span> MsgBean(<span class="hljs-string">&quot;direct message1&quot;</span>), data);<br>    ThreadUtil.sleep(<span class="hljs-number">1000</span>);<br>    log.info(<span class="hljs-string">&quot;----------------------------------------------&quot;</span>);<br>    data = <span class="hljs-keyword">new</span> CorrelationData();<br>    log.info(<span class="hljs-string">&quot;准备发送消息2-id: &quot;</span> + data.getId());<br>    rabbitTemplate.convertAndSend(MQConsts.DIRECT_EXCHANGE, <span class="hljs-string">&quot;abcde&quot;</span>, <span class="hljs-keyword">new</span> MsgBean(<span class="hljs-string">&quot;direct message2&quot;</span>), data);<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;OK&quot;</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>跑一下测试：</p><p><img src="https://riger.oss-cn-shanghai.aliyuncs.com/img/image-20210127145816665.png" alt="image-20210127145816665"></p><p>发现消息1、2都成功发送到了MQ，但是2由于 routingkey:abcde 匹配不到队列，发送失败，回调：NO_ROUTE</p><h3 id="2-MQ可靠性"><a href="#2-MQ可靠性" class="headerlink" title="2. MQ可靠性"></a>2. MQ可靠性</h3><p>MQ 可靠性就是保证消息在 MQ内部不丢失，有一下三点考量：</p><ol><li>Exchange 持久化，查看源码可知：我们使用单参数构造器创建 Exchange 默认就是 durable 的</li></ol><p><img src="https://riger.oss-cn-shanghai.aliyuncs.com/img/image-20210127155315873.png" alt="image-20210127155315873"></p><ol start="2"><li>Queue 持久化，一样，spring-amqp 给我们默认就是 durable的</li></ol><p><img src="https://riger.oss-cn-shanghai.aliyuncs.com/img/image-20210127155749822.png" alt="image-20210127155749822"></p><ol start="3"><li>消息持久化，这个需要设置消息的 delivery_mode 为 2，这个也是默认值</li></ol><p>我们使用的 <code>convertAndSend</code>方法内部调用了 <code>convertMessageIfNecessary</code>方法，构造 Message，传入了 <code>new MessageProperties()</code></p><p><code>MessageProperties</code>中有静态代码块：</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">static</span> &#123;<br>    DEFAULT_DELIVERY_MODE = MessageDeliveryMode.PERSISTENT;<br>    DEFAULT_PRIORITY = <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>既然默认就是持久化的，测试一下，声明一个 Exchange 绑定一个队列，但是不声明消费者：</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * 持久化测试</span><br><span class="hljs-comment"> */</span><br>FanoutExchange exchange = <span class="hljs-keyword">new</span> FanoutExchange(MQConsts.DURABLE_EXCHANGE);<br>Queue queue = <span class="hljs-keyword">new</span> Queue(MQConsts.DURABLE_QUEUE);<br>amqpAdmin.declareExchange(exchange);<br>amqpAdmin.declareQueue(queue);<br>amqpAdmin.declareBinding(BindingBuilder.bind(queue).to(exchange));<br></code></pre></div></td></tr></table></figure><p>这次我们通过UI界面来发一下消息， 点击我们声明的新队列 Queue4，注意 Delivery mode 选 2，点击 Publish message</p><p><img src="https://riger.oss-cn-shanghai.aliyuncs.com/img/image-20210127163622148.png" alt="image-20210127163622148"></p><p>可以看到这个队列里有一条消息留在那里：</p><p><img src="https://riger.oss-cn-shanghai.aliyuncs.com/img/image-20210127163830986.png" alt="image-20210127163830986"></p><p>我们重启一下 rabbitmq：</p><p><img src="https://riger.oss-cn-shanghai.aliyuncs.com/img/image-20210127164002818.png" alt="image-20210127164002818"></p><p>刷新一下页面，可以看到由于刚启动，Message rates 都是空的，但是 queue4 的消息还在：</p><p><img src="https://riger.oss-cn-shanghai.aliyuncs.com/img/image-20210127164132426.png" alt="image-20210127164132426"></p><h3 id="3-消费者可靠性"><a href="#3-消费者可靠性" class="headerlink" title="3. 消费者可靠性"></a>3. 消费者可靠性</h3><p>消费者也可能丢失消息，比如我取了消息，还没处理，服务挂了，这样消息就丢了。</p><p>解决的方法是关闭 RabbitMQ 的自动 <code>ack</code>，我们处理完消息之后手动 <code>ack</code>，这样就可以确保消息消费后才从消息队列移除。</p><p>开启手动 ack，消费端 yml 里配置：</p><figure class="highlight yaml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs yaml"><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">rabbitmq:</span><br>    <span class="hljs-attr">listener:</span><br>      <span class="hljs-attr">simple:</span><br>        <span class="hljs-comment"># 开启消费端消息手动ack</span><br>        <span class="hljs-attr">acknowledge-mode:</span> <span class="hljs-string">manual</span><br></code></pre></div></td></tr></table></figure><p>这时候，我们的接收的处理就要改写一下了， 我们改写一下 queue3 的消费者：</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-meta">@RabbitListener(queues = MQConsts.QUEUE3)</span><br><span class="hljs-meta">@RabbitHandler</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">receiveQueue3ManualAck</span><span class="hljs-params">(MsgBean msgBean, Message message, Channel channel)</span> </span>&#123;<br>    <span class="hljs-comment">// deliveryTag 在通道内顺序自增</span><br>    <span class="hljs-keyword">long</span> deliveryTag = message.getMessageProperties().getDeliveryTag();<br>    <span class="hljs-keyword">try</span> &#123;<br>        <span class="hljs-comment">// 消费消息</span><br>        log.info(<span class="hljs-string">&quot;queue3 receive msg -&gt; :&quot;</span> + JSONUtil.toJsonStr(msgBean));<br>        <span class="hljs-comment">// 通知MQ已经成功消费,可以ack, false 表示不批量</span><br>        channel.basicAck(deliveryTag, <span class="hljs-keyword">false</span>);<br>    &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>        e.printStackTrace();<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-comment">// 处理失败,重新放回MQ</span><br>            channel.basicRecover();<br>        &#125; <span class="hljs-keyword">catch</span> (IOException ioException) &#123;<br>            ioException.printStackTrace();<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>再往 queue3 发一条消息：</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-meta">@GetMapping(&quot;/ack&quot;)</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">consumerMaualAck</span><span class="hljs-params">()</span> </span>&#123;<br>    rabbitTemplate.convertAndSend(MQConsts.DIRECT_EXCHANGE, <span class="hljs-string">&quot;queue3&quot;</span>, <span class="hljs-keyword">new</span> MsgBean(<span class="hljs-string">&quot;manual ack&quot;</span>));<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;OK&quot;</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><p><img src="https://riger.oss-cn-shanghai.aliyuncs.com/img/image-20210127171638141.png" alt="image-20210127171638141"></p><p>可以看到顺利接受了消息（null 是我这条消息没有带<code>CorrelationData</code>）</p><h3 id="4-MQ高可用"><a href="#4-MQ高可用" class="headerlink" title="4. MQ高可用"></a>4. MQ高可用</h3><p>上面完成了消息从生产者到消费者的可靠性投递，但是由于我们的 MQ 是单节点，挂了还是不可用，实际生产中，会部署 RabbitMQ 集群，这里注意，RabbitMQ 的集群只能提高<strong>吞吐量</strong>，并不能高可用。想要做到高可用，可以在集群中对有需要的队列配置<strong>镜像队列</strong>，真正实现高可用，可以在 UI 界面的 Admin Policies 里配置，可以参考<a href="https://www.rabbitmq.com/ha.html">官方文档</a></p><h2 id="6-延迟队列"><a href="#6-延迟队列" class="headerlink" title="6. 延迟队列"></a>6. 延迟队列</h2><p>消息队列还有一个比较常见的使用场景：延迟队列，比如订单1小时不支付，自动取消，返还库存等</p><p>RabbitMQ 实现延迟队列有两种方式：死信队列 和 延迟队列插件</p><p>死信队列结合消息超时时间 TTL 可以实现延迟队列效果，但是实现起来没有用插件来的方便，这里我们介绍一下插件使用</p><p>插件的<a href="https://github.com/rabbitmq/rabbitmq-delayed-message-exchange/releases">下载地址</a>，我使用的是最新的 3.8.9 版本，下载插件，拷贝到容器内，并启动：</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash"><span class="hljs-comment"># 拷贝插件到容器内</span><br>docker cp ~/Downloads/rabbitmq_delayed_message_exchange-3.8.9-0199d11c.ez rabbitmq:/plugins<br><span class="hljs-comment"># 进入容器内</span><br>docker <span class="hljs-built_in">exec</span> -it rabbitmq /bin/bash<br><span class="hljs-built_in">cd</span> /plugins<br>ls |grep delayed<br><span class="hljs-comment"># 启动插件</span><br>rabbitmq-plugins <span class="hljs-built_in">enable</span> rabbitmq_delayed_message_exchange<br><span class="hljs-comment"># 退出容器</span><br><span class="hljs-built_in">exit</span><br><span class="hljs-comment"># 重启MQ</span><br>docker restart rabbitmq<br></code></pre></div></td></tr></table></figure><p>我们代码里声明一下延迟队列和它的 Exchange：</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-comment">// MQConsts.java</span><br>String DELAYED_QUEUE = <span class="hljs-string">&quot;delayed.queue&quot;</span>;<br>String DELAYED_ECCHANGE = <span class="hljs-string">&quot;delayed.exchange&quot;</span>;<br><br><span class="hljs-comment">// MQConfig</span><br>Queue delayedQueue = <span class="hljs-keyword">new</span> Queue(MQConsts.DELAYED_QUEUE);<br><span class="hljs-comment">// 根据官方文档,我们这样声明一个Exchange</span><br>Map&lt;String, Object&gt; args = MapUtil.newHashMap();<br>args.put(<span class="hljs-string">&quot;x-delayed-type&quot;</span>, <span class="hljs-string">&quot;direct&quot;</span>);<br>CustomExchange customExchange = <span class="hljs-keyword">new</span> CustomExchange(MQConsts.DELAYED_ECCHANGE, <span class="hljs-string">&quot;x-delayed-message&quot;</span>, <span class="hljs-keyword">true</span>, <span class="hljs-keyword">false</span>, args);<br>amqpAdmin.declareQueue(delayedQueue);<br>amqpAdmin.declareExchange(customExchange);<br><span class="hljs-comment">// 这里路由键我们就用延迟队列的名字</span><br>amqpAdmin.declareBinding(BindingBuilder.bind(delayedQueue).to(customExchange).with(MQConsts.DELAYED_QUEUE).noargs());<br></code></pre></div></td></tr></table></figure><p>发送延迟消息这样发：</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-meta">@GetMapping(&quot;/delay&quot;)</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">delayQueue</span><span class="hljs-params">()</span> </span>&#123;<br>    log.info(<span class="hljs-string">&quot;send time:&#123;&#125;&quot;</span>, System.currentTimeMillis());<br>    rabbitTemplate.convertAndSend(MQConsts.DELAYED_ECCHANGE, MQConsts.DELAYED_QUEUE, <span class="hljs-keyword">new</span> MsgBean(<span class="hljs-string">&quot;delay queue&quot;</span>), message -&gt; &#123;<br>        message.getMessageProperties().setHeader(<span class="hljs-string">&quot;x-delay&quot;</span>, <span class="hljs-number">5000</span>);<br>        <span class="hljs-keyword">return</span> message;<br>    &#125;);<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;OK&quot;</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>我们先把消费端手动 ack 关了，方便测试：</p><figure class="highlight yaml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs yaml"><span class="hljs-attr">listener:</span><br>  <span class="hljs-attr">simple:</span><br>    <span class="hljs-attr">acknowledge-mode:</span> <span class="hljs-string">auto</span><br></code></pre></div></td></tr></table></figure><p>消费者代码：</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-meta">@RabbitListener(queues = MQConsts.DELAYED_QUEUE)</span><br><span class="hljs-meta">@RabbitHandler</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">receiveDelayedQueue</span><span class="hljs-params">(MsgBean msgBean)</span> </span>&#123;<br>    log.info(<span class="hljs-string">&quot;delayed queue receive msg -&gt; :&quot;</span> + JSONUtil.toJsonStr(msgBean));<br>    log.info(<span class="hljs-string">&quot;receive time:&#123;&#125;&quot;</span>, System.currentTimeMillis());<br>&#125;<br></code></pre></div></td></tr></table></figure><p>测试一下：</p><p><img src="https://riger.oss-cn-shanghai.aliyuncs.com/img/image-20210128092946695.png" alt="image-20210128092946695"></p><p>可以看到，实现了延迟5秒发送的效果，30 发送 35 收到。</p><p>但是延迟队列发的瞬间会提示发到队列失败，因为它是到了时间才往队列发，而生产者不会等那么久，所以这里如果做消息处理要注意一下。</p><p>本篇到此结束，已经写得很长了，太长会影响阅读性。</p><p>源码及脚本都在<a href="https://github.com/RigerWu/web-starter-demos">Github</a>上</p><p>Enjoy it!</p><h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><ul><li>[1] <a href="https://book.douban.com/subject/27591386/">RabbitMQ实战指南</a></li><li>[2] <a href="https://www.rabbitmq.com/documentation.html">RabbitMQ官方文档</a></li><li>[3] <a href="https://docs.spring.io/spring-amqp/docs/current/reference/html/">spring-amqp文档</a></li></ul>]]></content>
    
    
    <categories>
      
      <category>spring boot</category>
      
    </categories>
    
    
    <tags>
      
      <tag>rabbitmq</tag>
      
      <tag>emqp</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Mybatis基本使用入门</title>
    <link href="/2021/01/23/web-mybatis/"/>
    <url>/2021/01/23/web-mybatis/</url>
    
    <content type="html"><![CDATA[<h1 id="Mybatis基本使用入门"><a href="#Mybatis基本使用入门" class="headerlink" title="Mybatis基本使用入门"></a>Mybatis基本使用入门</h1><h2 id="1-Mybatis-简介"><a href="#1-Mybatis-简介" class="headerlink" title="1. Mybatis 简介"></a>1. Mybatis 简介</h2><p><a href="https://mybatis.org/mybatis-3/zh/index.html">Mybatis</a> 是一款优秀的持久层框架，它在简化了我们对数据库的操作和资源管理的同时，允许开发者自定义 SQL，保留了灵活性，是目前国内互联网环境中用得最多的 ORM 框架</p><p>它支持使用 XML 和 注解 两种方式来配置，一般来说我们推荐用 XML 配置：</p><p>一来可以集中配置，把配置放在一起；二来有比较好的插件支持，书写、生成都很方便，代码提示也更好</p><h2 id="2-环境准备"><a href="#2-环境准备" class="headerlink" title="2. 环境准备"></a>2. 环境准备</h2><p>我们使用 docker 在本地搭建一个的 Mysql 环境：</p><figure class="highlight routeros"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs routeros"><span class="hljs-comment"># 拉取镜像</span><br>docker pull mysql:5.7<br><span class="hljs-comment"># 这里重点是演示 Mybatis 就不映射配置文件和数据文件了</span><br>docker <span class="hljs-builtin-name">run</span> --name mysql \<br>-p 3306:3306 -e <span class="hljs-attribute">MYSQL_ROOT_PASSWORD</span>=123456 \<br>-d mysql:5.7<br></code></pre></div></td></tr></table></figure><p>我们使用 Navicat 等工具连接数据库，创建一个数据库：<code>mybatis</code></p><p>再准备一点数据，用作后面的测试：</p><figure class="highlight sql"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sql"><span class="hljs-keyword">DROP</span> <span class="hljs-keyword">TABLE</span> <span class="hljs-keyword">IF</span> <span class="hljs-keyword">EXISTS</span> <span class="hljs-keyword">user</span>;<br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> <span class="hljs-keyword">user</span><br>(<br><span class="hljs-keyword">id</span> <span class="hljs-built_in">BIGINT</span>(<span class="hljs-number">20</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-literal">NULL</span> AUTO_INCREMENT <span class="hljs-keyword">COMMENT</span> <span class="hljs-string">&#x27;主键ID&#x27;</span>,<br><span class="hljs-keyword">name</span> <span class="hljs-built_in">VARCHAR</span>(<span class="hljs-number">30</span>) <span class="hljs-literal">NULL</span> <span class="hljs-keyword">DEFAULT</span> <span class="hljs-literal">NULL</span> <span class="hljs-keyword">COMMENT</span> <span class="hljs-string">&#x27;姓名&#x27;</span>,<br>age <span class="hljs-built_in">INT</span>(<span class="hljs-number">11</span>) <span class="hljs-literal">NULL</span> <span class="hljs-keyword">DEFAULT</span> <span class="hljs-literal">NULL</span> <span class="hljs-keyword">COMMENT</span> <span class="hljs-string">&#x27;年龄&#x27;</span>,<br>email <span class="hljs-built_in">VARCHAR</span>(<span class="hljs-number">50</span>) <span class="hljs-literal">NULL</span> <span class="hljs-keyword">DEFAULT</span> <span class="hljs-literal">NULL</span> <span class="hljs-keyword">COMMENT</span> <span class="hljs-string">&#x27;邮箱&#x27;</span>,<br>PRIMARY <span class="hljs-keyword">KEY</span> (<span class="hljs-keyword">id</span>)<br>);<br><span class="hljs-keyword">DELETE</span> <span class="hljs-keyword">FROM</span> <span class="hljs-keyword">user</span>;<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> <span class="hljs-keyword">user</span> (<span class="hljs-keyword">id</span>, <span class="hljs-keyword">name</span>, age, email) <span class="hljs-keyword">VALUES</span><br>(<span class="hljs-number">1</span>, <span class="hljs-string">&#x27;Tom&#x27;</span>, <span class="hljs-number">18</span>, <span class="hljs-string">&#x27;tom@rigerwu.com&#x27;</span>),<br>(<span class="hljs-number">2</span>, <span class="hljs-string">&#x27;Lily&#x27;</span>, <span class="hljs-number">20</span>, <span class="hljs-string">&#x27;lily@rigerwu.com&#x27;</span>),<br>(<span class="hljs-number">3</span>, <span class="hljs-string">&#x27;Jack&#x27;</span>, <span class="hljs-number">28</span>, <span class="hljs-string">&#x27;jack@rigerwu.com&#x27;</span>),<br>(<span class="hljs-number">4</span>, <span class="hljs-string">&#x27;Rose&#x27;</span>, <span class="hljs-number">21</span>, <span class="hljs-string">&#x27;rose@rigerwu.com&#x27;</span>),<br>(<span class="hljs-number">5</span>, <span class="hljs-string">&#x27;Bob&#x27;</span>, <span class="hljs-number">24</span>, <span class="hljs-string">&#x27;bob@rigerwu.com&#x27;</span>);<br></code></pre></div></td></tr></table></figure><p><img src="https://riger.oss-cn-shanghai.aliyuncs.com/img/image-20210122223730914.png" alt="image-20210122223730914"><br>接下来我们直接在 IDEA 里配置数据库（为了后面的代码生成和提示）：</p><img src="https://riger.oss-cn-shanghai.aliyuncs.com/img/image-20210122223103159.png" alt="image-20210122223103159" /><p>我们输入相应的信息，测试通过后点击 OK：</p><p><img src="https://riger.oss-cn-shanghai.aliyuncs.com/img/image-20210122224100569.png" alt="image-20210122224100569"></p><p>这样我们就可以直接查看到表和数据了：</p><p><img src="https://riger.oss-cn-shanghai.aliyuncs.com/img/image-20210122224207567.png" alt="image-20210122224207567"></p><p>双击表名可以直接查询数据：</p><p><img src="https://riger.oss-cn-shanghai.aliyuncs.com/img/image-20210122224244318.png" alt="image-20210122224244318"></p><h2 id="3-依赖引入与配置"><a href="#3-依赖引入与配置" class="headerlink" title="3. 依赖引入与配置"></a>3. 依赖引入与配置</h2><p>新建一个 <code>web-mybatis</code> 项目，引入 mybatis 的 starter，和 druid 数据源：</p><p>你们可以再 Maven 仓库查找 <a href="https://mvnrepository.com/artifact/org.mybatis.spring.boot/mybatis-spring-boot-starter">mybatis-starter</a> 和 <a href="https://mvnrepository.com/artifact/com.alibaba/druid-spring-boot-starter">druid</a> 的最新版本</p><figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.mybatis.spring.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mybatis-spring-boot-starter<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.1.4<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.alibaba<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>druid-spring-boot-starter<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.2.4<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></div></td></tr></table></figure><p>yml 里做相应配置：</p><figure class="highlight yaml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs yaml"><span class="hljs-attr">server:</span><br>  <span class="hljs-attr">port:</span> <span class="hljs-number">8090</span><br><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">application:</span><br>    <span class="hljs-attr">name:</span> <span class="hljs-string">web-mybatis</span><br>  <span class="hljs-attr">datasource:</span><br>    <span class="hljs-attr">username:</span> <span class="hljs-string">root</span><br>    <span class="hljs-attr">password:</span> <span class="hljs-number">123456</span><br>    <span class="hljs-attr">url:</span> <span class="hljs-string">jdbc:mysql://localhost:3306/mybatis?useUnicode=true&amp;characterEncoding=UTF-8&amp;serverTimezone=Asia/Shanghai</span><br>    <span class="hljs-attr">driver-class-name:</span> <span class="hljs-string">com.mysql.cj.jdbc.Driver</span><br>    <span class="hljs-attr">type:</span> <span class="hljs-string">com.alibaba.druid.pool.DruidDataSource</span><br>    <span class="hljs-comment">#   数据源其他配置</span><br>    <span class="hljs-attr">druid:</span><br>      <span class="hljs-attr">initial-size:</span> <span class="hljs-number">10</span> <span class="hljs-comment"># 初始化时建立物理连接的个数。初始化发生在显示调用init方法，或者第一次getConnection时</span><br>      <span class="hljs-attr">min-idle:</span> <span class="hljs-number">10</span> <span class="hljs-comment"># 最小连接池数量</span><br>      <span class="hljs-attr">maxActive:</span> <span class="hljs-number">200</span> <span class="hljs-comment"># 最大连接池数量</span><br>      <span class="hljs-attr">maxWait:</span> <span class="hljs-number">60000</span> <span class="hljs-comment"># 获取连接时最大等待时间，单位毫秒。配置了maxWait之后，缺省启用公平锁，并发效率会有所下降，如果需要可以通过配置</span><br>      <span class="hljs-attr">timeBetweenEvictionRunsMillis:</span> <span class="hljs-number">60000</span> <span class="hljs-comment"># 关闭空闲连接的检测时间间隔.Destroy线程会检测连接的间隔时间，如果连接空闲时间大于等于minEvictableIdleTimeMillis则关闭物理连接。</span><br>      <span class="hljs-attr">minEvictableIdleTimeMillis:</span> <span class="hljs-number">300000</span> <span class="hljs-comment"># 连接的最小生存时间.连接保持空闲而不被驱逐的最小时间</span><br>      <span class="hljs-attr">validationQuery:</span> <span class="hljs-string">SELECT</span> <span class="hljs-number">1</span> <span class="hljs-comment"># 验证数据库服务可用性的sql.用来检测连接是否有效的sql 因数据库方言而差, 例如 oracle 应该写成 SELECT &#x27;x&#x27; FROM DUAL</span><br>      <span class="hljs-attr">testWhileIdle:</span> <span class="hljs-literal">true</span> <span class="hljs-comment"># 申请连接时检测空闲时间，根据空闲时间再检测连接是否有效.建议配置为true，不影响性能，并且保证安全性。申请连接的时候检测，如果空闲时间大于timeBetweenEvictionRun</span><br>      <span class="hljs-attr">testOnBorrow:</span> <span class="hljs-literal">false</span> <span class="hljs-comment"># 申请连接时直接检测连接是否有效.申请连接时执行validationQuery检测连接是否有效，做了这个配置会降低性能。</span><br>      <span class="hljs-attr">testOnReturn:</span> <span class="hljs-literal">false</span> <span class="hljs-comment"># 归还连接时检测连接是否有效.归还连接时执行validationQuery检测连接是否有效，做了这个配置会降低性能。</span><br>      <span class="hljs-attr">poolPreparedStatements:</span> <span class="hljs-literal">true</span> <span class="hljs-comment"># 开启PSCache</span><br>      <span class="hljs-attr">maxPoolPreparedStatementPerConnectionSize:</span> <span class="hljs-number">20</span> <span class="hljs-comment">#设置PSCache值</span><br>      <span class="hljs-attr">connectionErrorRetryAttempts:</span> <span class="hljs-number">3</span> <span class="hljs-comment"># 连接出错后再尝试连接三次</span><br>      <span class="hljs-attr">breakAfterAcquireFailure:</span> <span class="hljs-literal">true</span> <span class="hljs-comment"># 数据库服务宕机自动重连机制</span><br>      <span class="hljs-attr">timeBetweenConnectErrorMillis:</span> <span class="hljs-number">300000</span> <span class="hljs-comment"># 连接出错后重试时间间隔</span><br>      <span class="hljs-attr">asyncInit:</span> <span class="hljs-literal">true</span> <span class="hljs-comment"># 异步初始化策略</span><br>      <span class="hljs-attr">remove-abandoned:</span> <span class="hljs-literal">true</span> <span class="hljs-comment"># 是否自动回收超时连接</span><br>      <span class="hljs-attr">remove-abandoned-timeout:</span> <span class="hljs-number">1800</span> <span class="hljs-comment"># 超时时间(以秒数为单位)</span><br>      <span class="hljs-attr">transaction-query-timeout:</span> <span class="hljs-number">6000</span> <span class="hljs-comment"># 事务超时时间</span><br>      <span class="hljs-attr">filters:</span> <span class="hljs-string">stat,wall,slf4j</span><br>      <span class="hljs-attr">connectionProperties:</span> <span class="hljs-string">druid.stat.mergeSql\=true;druid.stat.slowSqlMillis\=5000</span><br>      <span class="hljs-attr">web-stat-filter:</span><br>        <span class="hljs-attr">enabled:</span> <span class="hljs-literal">true</span><br>        <span class="hljs-attr">url-pattern:</span> <span class="hljs-string">/*</span><br>        <span class="hljs-attr">exclusions:</span> <span class="hljs-string">&quot;*.js,*.gif,*.jpg,*.bmp,*.png,*.css,*.ico,/druid/*&quot;</span><br>      <span class="hljs-attr">stat-view-servlet:</span><br>        <span class="hljs-attr">enabled:</span> <span class="hljs-literal">true</span><br>        <span class="hljs-attr">url-pattern:</span> <span class="hljs-string">/druid/*</span><br>        <span class="hljs-attr">allow:</span><br>        <span class="hljs-comment">#        deny:</span><br>        <span class="hljs-attr">reset-enable:</span> <span class="hljs-literal">true</span><br>        <span class="hljs-attr">login-username:</span> <span class="hljs-string">riger</span><br>        <span class="hljs-attr">login-password:</span> <span class="hljs-string">riger</span><br>      <span class="hljs-attr">filter:</span><br>        <span class="hljs-attr">slf4j:</span><br>          <span class="hljs-attr">enabled:</span> <span class="hljs-literal">true</span><br>          <span class="hljs-attr">statement-executable-sql-log-enable:</span> <span class="hljs-literal">true</span><br><br><span class="hljs-attr">mybatis:</span><br>  <span class="hljs-comment"># mapper 映射文件位置</span><br>  <span class="hljs-attr">mapper-locations:</span> <span class="hljs-string">classpath:mapper/*.xml</span><br>  <span class="hljs-attr">configuration:</span><br>    <span class="hljs-comment"># 开启映射驼峰和下划线</span><br>    <span class="hljs-attr">map-underscore-to-camel-case:</span> <span class="hljs-literal">true</span><br>  <span class="hljs-attr">type-aliases-package:</span> <span class="hljs-string">com.rigerwu.web.mybatis.entity</span><br><span class="hljs-comment"># 让日志打印Sql</span><br><span class="hljs-attr">logging:</span><br>  <span class="hljs-attr">level:</span><br>    <span class="hljs-attr">com.rigerwu.web.mybatis.mapper:</span> <span class="hljs-string">debug</span><br></code></pre></div></td></tr></table></figure><p>启动类上加上 MapperScan，这样我们不用每个接口上都标上 <code>@Mapper</code> 注解了：</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-meta">@MapperScan(basePackages = &#123;&quot;com.rigerwu.web.mybatis.mapper&quot;&#125;)</span><br></code></pre></div></td></tr></table></figure><h2 id="4-插件的基本使用"><a href="#4-插件的基本使用" class="headerlink" title="4. 插件的基本使用"></a>4. 插件的基本使用</h2><p>接下来，重点来了！我们打开 Settings -&gt; plugins -&gt; marketplace -&gt; 搜索 <code>MybatisX</code>，下载安装：</p><img src="https://riger.oss-cn-shanghai.aliyuncs.com/img/image-20210122223103159.png" alt="image-20210122223103159" style="zoom:70%;" /><p>今后我们怎么写 XML 和 接口？不用写，直接生成！我们在 User 表上右键，选择 Mybatis-Generator ：</p><img src="https://riger.oss-cn-shanghai.aliyuncs.com/img/image-20210122224558967.png" alt="image-20210122224558967" style="zoom: 80%;" /><p>填好包名和路径，点击OK，这里为了代码简洁，我还勾选了 Lombok：</p><p><img src="https://riger.oss-cn-shanghai.aliyuncs.com/img/image-20210123222114081.png" alt="image-20210123222114081"></p><p>点击后生成了三个文件（红色未 add 的三个，这里我方便演示没再分包了）：</p><p><img src="https://riger.oss-cn-shanghai.aliyuncs.com/img/image-20210123222142905.png" alt="image-20210123222142905"></p><p>User.java</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.rigerwu.web.mybatis;<br><br><span class="hljs-keyword">import</span> java.io.Serializable;<br><span class="hljs-keyword">import</span> lombok.Data;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@TableName</span> user</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Data</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">User</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Serializable</span> </span>&#123;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 主键ID</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@mbg</span>.generated Fri Jan 22 22:51:56 CST 2021</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> Long id;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 姓名</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@mbg</span>.generated Fri Jan 22 22:51:56 CST 2021</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> String name;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 年龄</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@mbg</span>.generated Fri Jan 22 22:51:56 CST 2021</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> Integer age;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 邮箱</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@mbg</span>.generated Fri Jan 22 22:51:56 CST 2021</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> String email;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * This field was generated by MyBatis Generator.</span><br><span class="hljs-comment">     * This field corresponds to the database table user</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@mbg</span>.generated Fri Jan 22 22:51:56 CST 2021</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">long</span> serialVersionUID = <span class="hljs-number">1L</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>UserDao.java</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.rigerwu.web.mybatis;<br><br><span class="hljs-keyword">import</span> com.rigerwu.web.mybatis.User;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Entity</span> com.rigerwu.web.mybatis.User</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">UserDao</span> </span>&#123;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@mbg</span>.generated</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">deleteByPrimaryKey</span><span class="hljs-params">(Long id)</span></span>;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@mbg</span>.generated</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">insert</span><span class="hljs-params">(User record)</span></span>;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@mbg</span>.generated</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">insertSelective</span><span class="hljs-params">(User record)</span></span>;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@mbg</span>.generated</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function">User <span class="hljs-title">selectByPrimaryKey</span><span class="hljs-params">(Long id)</span></span>;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@mbg</span>.generated</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">updateByPrimaryKeySelective</span><span class="hljs-params">(User record)</span></span>;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@mbg</span>.generated</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">updateByPrimaryKey</span><span class="hljs-params">(User record)</span></span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>UserDao.xml</p><figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">mapper</span> <span class="hljs-meta-keyword">PUBLIC</span> <span class="hljs-meta-string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span> <span class="hljs-meta-string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">mapper</span> <span class="hljs-attr">namespace</span>=<span class="hljs-string">&quot;com.rigerwu.web.mybatis.UserDao&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">resultMap</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;BaseResultMap&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;com.rigerwu.web.mybatis.User&quot;</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--@mbg.generated--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">id</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;id&quot;</span> <span class="hljs-attr">jdbcType</span>=<span class="hljs-string">&quot;BIGINT&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;id&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;name&quot;</span> <span class="hljs-attr">jdbcType</span>=<span class="hljs-string">&quot;VARCHAR&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;name&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;age&quot;</span> <span class="hljs-attr">jdbcType</span>=<span class="hljs-string">&quot;INTEGER&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;age&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;email&quot;</span> <span class="hljs-attr">jdbcType</span>=<span class="hljs-string">&quot;VARCHAR&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;email&quot;</span> /&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">resultMap</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">sql</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;Base_Column_List&quot;</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--@mbg.generated--&gt;</span><br>    id, `name`, age, email<br>  <span class="hljs-tag">&lt;/<span class="hljs-name">sql</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;selectByPrimaryKey&quot;</span> <span class="hljs-attr">parameterType</span>=<span class="hljs-string">&quot;java.lang.Long&quot;</span> <span class="hljs-attr">resultMap</span>=<span class="hljs-string">&quot;BaseResultMap&quot;</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--@mbg.generated--&gt;</span><br>    select <br>    <span class="hljs-tag">&lt;<span class="hljs-name">include</span> <span class="hljs-attr">refid</span>=<span class="hljs-string">&quot;Base_Column_List&quot;</span> /&gt;</span><br>    from user<br>    where id = #&#123;id,jdbcType=BIGINT&#125;<br>  <span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">delete</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;deleteByPrimaryKey&quot;</span> <span class="hljs-attr">parameterType</span>=<span class="hljs-string">&quot;java.lang.Long&quot;</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--@mbg.generated--&gt;</span><br>    delete from user<br>    where id = #&#123;id,jdbcType=BIGINT&#125;<br>  <span class="hljs-tag">&lt;/<span class="hljs-name">delete</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">insert</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;insert&quot;</span> <span class="hljs-attr">keyColumn</span>=<span class="hljs-string">&quot;id&quot;</span> <span class="hljs-attr">keyProperty</span>=<span class="hljs-string">&quot;id&quot;</span> <span class="hljs-attr">parameterType</span>=<span class="hljs-string">&quot;com.rigerwu.web.mybatis.User&quot;</span> <span class="hljs-attr">useGeneratedKeys</span>=<span class="hljs-string">&quot;true&quot;</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--@mbg.generated--&gt;</span><br>    insert into user (`name`, age, email<br>      )<br>    values (#&#123;name,jdbcType=VARCHAR&#125;, #&#123;age,jdbcType=INTEGER&#125;, #&#123;email,jdbcType=VARCHAR&#125;<br>      )<br>  <span class="hljs-tag">&lt;/<span class="hljs-name">insert</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">insert</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;insertSelective&quot;</span> <span class="hljs-attr">keyColumn</span>=<span class="hljs-string">&quot;id&quot;</span> <span class="hljs-attr">keyProperty</span>=<span class="hljs-string">&quot;id&quot;</span> <span class="hljs-attr">parameterType</span>=<span class="hljs-string">&quot;com.rigerwu.web.mybatis.User&quot;</span> <span class="hljs-attr">useGeneratedKeys</span>=<span class="hljs-string">&quot;true&quot;</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--@mbg.generated--&gt;</span><br>    insert into user<br>    <span class="hljs-tag">&lt;<span class="hljs-name">trim</span> <span class="hljs-attr">prefix</span>=<span class="hljs-string">&quot;(&quot;</span> <span class="hljs-attr">suffix</span>=<span class="hljs-string">&quot;)&quot;</span> <span class="hljs-attr">suffixOverrides</span>=<span class="hljs-string">&quot;,&quot;</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;name != null&quot;</span>&gt;</span><br>        `name`,<br>      <span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;age != null&quot;</span>&gt;</span><br>        age,<br>      <span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;email != null&quot;</span>&gt;</span><br>        email,<br>      <span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">trim</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">trim</span> <span class="hljs-attr">prefix</span>=<span class="hljs-string">&quot;values (&quot;</span> <span class="hljs-attr">suffix</span>=<span class="hljs-string">&quot;)&quot;</span> <span class="hljs-attr">suffixOverrides</span>=<span class="hljs-string">&quot;,&quot;</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;name != null&quot;</span>&gt;</span><br>        #&#123;name,jdbcType=VARCHAR&#125;,<br>      <span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;age != null&quot;</span>&gt;</span><br>        #&#123;age,jdbcType=INTEGER&#125;,<br>      <span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;email != null&quot;</span>&gt;</span><br>        #&#123;email,jdbcType=VARCHAR&#125;,<br>      <span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">trim</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">insert</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">update</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;updateByPrimaryKeySelective&quot;</span> <span class="hljs-attr">parameterType</span>=<span class="hljs-string">&quot;com.rigerwu.web.mybatis.User&quot;</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--@mbg.generated--&gt;</span><br>    update user<br>    <span class="hljs-tag">&lt;<span class="hljs-name">set</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;name != null&quot;</span>&gt;</span><br>        `name` = #&#123;name,jdbcType=VARCHAR&#125;,<br>      <span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;age != null&quot;</span>&gt;</span><br>        age = #&#123;age,jdbcType=INTEGER&#125;,<br>      <span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;email != null&quot;</span>&gt;</span><br>        email = #&#123;email,jdbcType=VARCHAR&#125;,<br>      <span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">set</span>&gt;</span><br>    where id = #&#123;id,jdbcType=BIGINT&#125;<br>  <span class="hljs-tag">&lt;/<span class="hljs-name">update</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">update</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;updateByPrimaryKey&quot;</span> <span class="hljs-attr">parameterType</span>=<span class="hljs-string">&quot;com.rigerwu.web.mybatis.User&quot;</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--@mbg.generated--&gt;</span><br>    update user<br>    set `name` = #&#123;name,jdbcType=VARCHAR&#125;,<br>      age = #&#123;age,jdbcType=INTEGER&#125;,<br>      email = #&#123;email,jdbcType=VARCHAR&#125;<br>    where id = #&#123;id,jdbcType=BIGINT&#125;<br>  <span class="hljs-tag">&lt;/<span class="hljs-name">update</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">mapper</span>&gt;</span><br></code></pre></div></td></tr></table></figure><p>看，单表的简单增删改查已经帮我们生成好了。</p><p>MybatisX 还能让我们快速得在 XML 和 Dao 之间跳转：</p><p><img src="https://riger.oss-cn-shanghai.aliyuncs.com/img/Kapture%202021-01-23%20at%2021.54.30.gif" alt="Kapture 2021-01-23 at 21.54.30"></p><p>甚至能根据字段提示，自动帮我们写增删改查的 sql：</p><p><img src="https://riger.oss-cn-shanghai.aliyuncs.com/img/Kapture%202021-01-23%20at%2022.09.14.gif" alt="Kapture 2021-01-23 at 22.09.14"></p><p>是不是爽歪歪？</p><h2 id="5-测试"><a href="#5-测试" class="headerlink" title="5. 测试"></a>5. 测试</h2><p>我们简单写个测试类，测几个方法：</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.rigerwu.web.mybatis.mapper;<br><br><span class="hljs-keyword">import</span> com.rigerwu.web.mybatis.entity.User;<br><span class="hljs-keyword">import</span> lombok.extern.slf4j.Slf4j;<br><span class="hljs-keyword">import</span> org.junit.jupiter.api.Assertions;<br><span class="hljs-keyword">import</span> org.junit.jupiter.api.Test;<br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Autowired;<br><span class="hljs-keyword">import</span> org.springframework.boot.test.context.SpringBootTest;<br><br><span class="hljs-keyword">import</span> java.util.List;<br><br><span class="hljs-meta">@Slf4j</span><br><span class="hljs-meta">@SpringBootTest</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">UserDaoTest</span> </span>&#123;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> UserDao userDao;<br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">insert</span><span class="hljs-params">()</span> </span>&#123;<br>        User user = <span class="hljs-keyword">new</span> User();<br>        user.setName(<span class="hljs-string">&quot;Tony&quot;</span>);<br>        user.setAge(<span class="hljs-number">22</span>);<br>        user.setEmail(<span class="hljs-string">&quot;tony@rigerwu.com&quot;</span>);<br>        userDao.insert(user);<br>        log.info(user.toString());<br>        Assertions.assertTrue(user.getId() &gt; <span class="hljs-number">0</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">deleteByPrimaryKey</span><span class="hljs-params">()</span> </span>&#123;<br>        List&lt;User&gt; tony = userDao.queryByNameAndEmail(<span class="hljs-string">&quot;Tony&quot;</span>, <span class="hljs-string">&quot;tony@rigerwu.com&quot;</span>);<br>        tony.forEach(user -&gt; &#123;<br>            <span class="hljs-keyword">int</span> i = userDao.deleteByPrimaryKey(user.getId());<br>            Assertions.assertTrue(i &gt; <span class="hljs-number">0</span>);<br>        &#125;);<br>    &#125;<br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">selectByPrimaryKey</span><span class="hljs-params">()</span> </span>&#123;<br>        User user = userDao.selectByPrimaryKey(<span class="hljs-number">1L</span>);<br>        log.info(user.toString());<br>        Assertions.assertEquals((<span class="hljs-keyword">long</span>) user.getId(), <span class="hljs-number">1</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">updateByPrimaryKeySelective</span><span class="hljs-params">()</span> </span>&#123;<br>        User user = <span class="hljs-keyword">new</span> User();<br>        user.setId(<span class="hljs-number">1L</span>);<br>        user.setEmail(<span class="hljs-string">&quot;tom1@rigerwu.com&quot;</span>);<br>        <span class="hljs-keyword">int</span> i = userDao.updateByPrimaryKeySelective(user);<br>        Assertions.assertTrue( i &gt; <span class="hljs-number">0</span>);<br>        User updatedUser = userDao.selectByPrimaryKey(<span class="hljs-number">1L</span>);<br>        Assertions.assertTrue(updatedUser.getEmail().startsWith(<span class="hljs-string">&quot;tom1&quot;</span>));<br>    &#125;<br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">queryByNameAndEmail</span><span class="hljs-params">()</span> </span>&#123;<br>        List&lt;User&gt; jack = userDao.queryByNameAndEmail(<span class="hljs-string">&quot;Jack&quot;</span>, <span class="hljs-string">&quot;jack@rigerwu.com&quot;</span>);<br>        Assertions.assertEquals(jack.size(), <span class="hljs-number">1</span>);<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>顺利通过测试：</p><p><img src="https://riger.oss-cn-shanghai.aliyuncs.com/img/image-20210124154210845.png" alt="image-20210124154210845"></p><h2 id="6-Druid监控"><a href="#6-Druid监控" class="headerlink" title="6. Druid监控"></a>6. Druid监控</h2><p>我们使用的是 Druid 数据源，并在配置文件配置了相应监控的配置，接下来测试一下能付正常使用</p><p>写一个简单的 Controller：</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-meta">@RestController</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">UserController</span> </span>&#123;<br><br>    <span class="hljs-comment">// 这里为了演示,直接调的dao,实际开发应当使用service</span><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> UserDao userDao;<br><br>    <span class="hljs-meta">@GetMapping(&quot;/user/&#123;id&#125;&quot;)</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> User <span class="hljs-title">getUserById</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable(&quot;id&quot;)</span> Long id)</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> userDao.selectByPrimaryKey(id);<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>我们项目启动起来，访问一下我们的 Controller：</p><p><img src="https://riger.oss-cn-shanghai.aliyuncs.com/img/image-20210124160306141.png" alt="image-20210124160306141"></p><p>正常返回了结果，然后登录 druid 监控地址：<a href="http://localhost:8090/druid/">http://localhost:8090/druid/</a></p><p><img src="https://riger.oss-cn-shanghai.aliyuncs.com/img/image-20210124155152663.png" alt="image-20210124155152663"></p><p>输入我们设置的账号密码：riger/riger，查看 Sql 监控：</p><p><img src="https://riger.oss-cn-shanghai.aliyuncs.com/img/image-20210124160418924.png" alt="image-20210124160418924"></p><p>可以看到我们的 SQL 执行记录，这在实际生产中可以帮我们分析慢SQL，和查看数据源状态，非常方便。</p><p>好了，Mybatis 入门就讲到这里。</p><p>源码及脚本都在<a href="https://github.com/RigerWu/web-starter-demos">Github</a>上</p><p>Enjoy it!</p>]]></content>
    
    
    <categories>
      
      <category>spring boot</category>
      
    </categories>
    
    
    <tags>
      
      <tag>mybatis</tag>
      
      <tag>db</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>使用ELK记录微服务日志</title>
    <link href="/2021/01/17/web-log-elk/"/>
    <url>/2021/01/17/web-log-elk/</url>
    
    <content type="html"><![CDATA[<h1 id="使用ELK记录微服务日志"><a href="#使用ELK记录微服务日志" class="headerlink" title="使用ELK记录微服务日志"></a>使用ELK记录微服务日志</h1><h2 id="1-简介"><a href="#1-简介" class="headerlink" title="1. 简介"></a>1. 简介</h2><p>上一节我们讲解了 Logback 的配置，完成了日志打印到文件的第一步</p><p>一般来说，后台服务规模比较小的情况下，这样是没问题的，但是一旦分布式部署众多服务器，日志的查询和管理就成了很大的问题</p><p>这个时候我们可以使用比较成熟的分布式日志解决方案：ELK</p><p>ELK 是 Elasticsearch、Logstash、Kibana 的缩写</p><p>简单来说就是通过 Logstash 收集处理日志，然后存储到 Elasticsearch，在通过 Kinbana 进行可视化的搜索、查询、汇聚分析。</p><p>我们使用使用 SpringBoot 来构建微服务，可以配置 <a href="https://github.com/logstash/logstash-logback-encoder">logstash-logback-encoder</a> 通过tcp或udp把产生的日志传送到 Logstash服务</p><p>简单流程如图：</p><h2 id=""><a href="#" class="headerlink" title=""></a><img src="https://riger.oss-cn-shanghai.aliyuncs.com/img/elk-0931238.png" alt="elk"></h2><h2 id="2-搭建"><a href="#2-搭建" class="headerlink" title="2. 搭建"></a>2. 搭建</h2><p>为了方便起见，我们使用开源项目 <a href="https://github.com/deviantony/docker-elk">docker-elk</a> 的配置来进行安装</p><p>环境要求：</p><ul><li>Docker 版本 17.05 以上 <code>docker version</code></li><li>Docker Compose 版本 1.20.0 以上 <code>docker-compose version</code></li><li>2G 内存以上</li></ul><p>这里我使用我电脑上装的一台虚拟机，ip 是 <code>192.168.0.2</code></p><p>在服务器上 clone 项目：</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">git <span class="hljs-built_in">clone</span> https://github.com/deviantony/docker-elk.git<br><span class="hljs-comment"># Redhat 和 CentOS 执行一下以下语句确保能正常使用</span><br>chcon -R system_u:object_r:admin_home_t:s0 docker-elk/<br></code></pre></div></td></tr></table></figure><p>起目录结构如下：</p><figure class="highlight css"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs css"><span class="hljs-selector-tag">docker-elk</span>/<br>├── <span class="hljs-selector-tag">docker-compose</span><span class="hljs-selector-class">.yml</span><br>├── <span class="hljs-selector-tag">docker-stack</span><span class="hljs-selector-class">.yml</span><br>├── <span class="hljs-selector-tag">elasticsearch</span><br>│   ├── <span class="hljs-selector-tag">config</span><br>│   └── <span class="hljs-selector-tag">Dockerfile</span><br>├── <span class="hljs-selector-class">.env</span><br>├── <span class="hljs-selector-tag">extensions</span><br>│   ├── <span class="hljs-selector-tag">apm-server</span><br>│   ├── <span class="hljs-selector-tag">curator</span><br>│   ├── <span class="hljs-selector-tag">enterprise-search</span><br>│   ├── <span class="hljs-selector-tag">logspout</span><br>│   ├── <span class="hljs-selector-tag">metricbeat</span><br>│   └── <span class="hljs-selector-tag">README</span><span class="hljs-selector-class">.md</span><br>├── <span class="hljs-selector-tag">kibana</span><br>│   ├── <span class="hljs-selector-tag">config</span><br>│   └── <span class="hljs-selector-tag">Dockerfile</span><br>├── <span class="hljs-selector-tag">LICENSE</span><br>├── <span class="hljs-selector-tag">logstash</span><br>│   ├── <span class="hljs-selector-tag">config</span><br>│   ├── <span class="hljs-selector-tag">Dockerfile</span><br>│   └── <span class="hljs-selector-tag">pipeline</span><br>└── <span class="hljs-selector-tag">README</span><span class="hljs-selector-class">.md</span><br></code></pre></div></td></tr></table></figure><p><code>.env</code> 文件定义了使用的 Elasticsearch 版本，我这里用是 <code>7.10.1</code>，有需要可以自行修改</p><p>然后我们修改一下 Logstash 的 build 配置，安装 json_lines 插件</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">vi logstash/Dockerfile<br><span class="hljs-comment"># 添加下面一行在最后</span><br>RUN bin/logstash-plugin install logstash-codec-json_lines<br></code></pre></div></td></tr></table></figure><p>再修改 Logstash 的配置文件 <code>vi logstash/pipeline/logstash.conf</code>，配置如下：</p><figure class="highlight puppet"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs puppet"><span class="hljs-keyword">input</span> &#123;<br>        beats &#123;<br>                <span class="hljs-attr">port</span> =&gt; <span class="hljs-number">5044</span><br>        &#125;<br><br>        <span class="hljs-keyword">tcp</span> &#123;<br>                <span class="hljs-attr">port</span> =&gt; <span class="hljs-number">5000</span><br>                <span class="hljs-attr">hots</span> =&gt; <span class="hljs-string">&quot;0.0.0.0&quot;</span><br>                <span class="hljs-attr">codec</span> =&gt; json_lines<br>        &#125;<br>&#125;<br><br><span class="hljs-comment">## Add your filters / logstash plugins configuration here</span><br><br><span class="hljs-keyword">output</span> &#123;<br>        elasticsearch &#123;<br>                <span class="hljs-attr">hosts</span> =&gt; <span class="hljs-string">&quot;elasticsearch:9200&quot;</span><br>                <span class="hljs-attr">user</span> =&gt; <span class="hljs-string">&quot;elastic&quot;</span><br>                <span class="hljs-attr">password</span> =&gt; <span class="hljs-string">&quot;changeme&quot;</span><br>                <span class="hljs-attr">ecs_compatibility</span> =&gt; disabled<br>                <span class="hljs-attr">codec</span> =&gt; json<br>        &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>我们可以直接启动：</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">docker-compose up<br></code></pre></div></td></tr></table></figure><p><img src="https://riger.oss-cn-shanghai.aliyuncs.com/img/image-20210117203759711.png" alt="image-20210117203759711"></p><p>第一次安装会下载镜像，并在镜像基础上 build，需要耐心等待</p><p><img src="https://riger.oss-cn-shanghai.aliyuncs.com/img/image-20210117211638847.png" alt="image-20210117211638847"></p><p>当我们看到三个 done，并且容器也开始打印 log 的时候，就启动完成了，后面 还需要等待 1 分钟左右，Kibana 才可以访问</p><p>我们访问之前，先用命令访问 Kibana Api，创建一个 index pattern：</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">curl -XPOST -D- <span class="hljs-string">&#x27;http://localhost:5601/api/saved_objects/index-pattern&#x27;</span> \<br>    -H <span class="hljs-string">&#x27;Content-Type: application/json&#x27;</span> \<br>    -H <span class="hljs-string">&#x27;kbn-version: 7.10.2&#x27;</span> \<br>    -u elastic:changeme \<br>    -d <span class="hljs-string">&#x27;&#123;&quot;attributes&quot;:&#123;&quot;title&quot;:&quot;logstash-*&quot;,&quot;timeFieldName&quot;:&quot;@timestamp&quot;&#125;&#125;&#x27;</span><br><br><span class="hljs-comment"># 可以看到成功创建了</span><br>[root@localhost docker-elk]<span class="hljs-comment"># curl -XPOST -D- &#x27;http://localhost:5601/api/saved_objects/index-pattern&#x27; \</span><br>&gt;     -H <span class="hljs-string">&#x27;Content-Type: application/json&#x27;</span> \<br>&gt;     -H <span class="hljs-string">&#x27;kbn-version: 7.10.2&#x27;</span> \<br>&gt;     -u elastic:changeme \<br>&gt;     -d <span class="hljs-string">&#x27;&#123;&quot;attributes&quot;:&#123;&quot;title&quot;:&quot;logstash-*&quot;,&quot;timeFieldName&quot;:&quot;@timestamp&quot;&#125;&#125;&#x27;</span><br>HTTP/1.1 200 OK<br>kbn-name: kibana<br>kbn-license-sig: 9c18aa7a665c803facb3814b41effaf3fd82a9af5581d75bf4d30992a38908a7<br>content-type: application/json; charset=utf-8<br>cache-control: private, no-cache, no-store, must-revalidate<br>content-length: 280<br>Date: Sun, 17 Jan 2021 13:26:40 GMT<br>Connection: keep-alive<br><br>&#123;<span class="hljs-string">&quot;type&quot;</span>:<span class="hljs-string">&quot;index-pattern&quot;</span>,<span class="hljs-string">&quot;id&quot;</span>:<span class="hljs-string">&quot;a1a4cb40-58c7-11eb-a33e-6bbb0a638f52&quot;</span>,<span class="hljs-string">&quot;attributes&quot;</span>:&#123;<span class="hljs-string">&quot;title&quot;</span>:<span class="hljs-string">&quot;logstash-*&quot;</span>,<span class="hljs-string">&quot;timeFieldName&quot;</span>:<span class="hljs-string">&quot;@timestamp&quot;</span>&#125;,<span class="hljs-string">&quot;references&quot;</span>:[],<span class="hljs-string">&quot;migrationVersion&quot;</span>:&#123;<span class="hljs-string">&quot;index-pattern&quot;</span>:<span class="hljs-string">&quot;7.6.0&quot;</span>&#125;,<span class="hljs-string">&quot;updated_at&quot;</span>:<span class="hljs-string">&quot;2021-01-17T13:26:39.859Z&quot;</span>,<span class="hljs-string">&quot;version&quot;</span>:<span class="hljs-string">&quot;Wzc2LDNd&quot;</span>,<span class="hljs-string">&quot;namespaces&quot;</span>:[<span class="hljs-string">&quot;default&quot;</span>]&#125;<br></code></pre></div></td></tr></table></figure><h2 id="3-Kibana配置"><a href="#3-Kibana配置" class="headerlink" title="3. Kibana配置"></a>3. Kibana配置</h2><p>直接访问 192.168.0.2:5601  </p><p><img src="https://riger.oss-cn-shanghai.aliyuncs.com/img/image-20210117230703734.png" alt="image-20210117230703734"></p><p>输入 docker-elk 配置的默认账户名：<code>elastic</code> 密码：<code>changeme</code>即可访问</p><p>我这里测试使用就不改密码了 ，生产环境建议按如下步骤修改密码：</p><figure class="highlight vala"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs vala"><span class="hljs-meta"># 1. 批量生产随机密码,记录下密码</span><br>docker-compose exec -T elasticsearch bin/elasticsearch-setup-passwords auto --batch<br><span class="hljs-meta"># 2. 删除 docker-compose.yml 中的 ELASTIC_PASSWORD</span><br><span class="hljs-meta"># 3. 修改kibana/config/kibana.yml 使用 kibana_system 用户和你自己的密码(小于7.8.0版本可以用 kibana y用户)</span><br><span class="hljs-meta">#    修改logstash/config/logstash.yml 使用 logstash_system 用户和你自己的密码</span><br><span class="hljs-meta">#    修改logstash/pipeline/logstash.conf 修改 elastic 用户的密码</span><br></code></pre></div></td></tr></table></figure><p>我们点击左侧菜单栏中的 Disocver：</p><p><img src="https://riger.oss-cn-shanghai.aliyuncs.com/img/image-20210118090532933.png" alt="image-20210118090532933"></p><p>可以看到，我们之前创建的 index pattern 已经有了：</p><p><img src="https://riger.oss-cn-shanghai.aliyuncs.com/img/image-20210118090748210.png" alt="image-20210118090748210"></p><p>不过这个时候还没有数据，我们接着往下看</p><h2 id="4-微服务配置"><a href="#4-微服务配置" class="headerlink" title="4. 微服务配置"></a>4. 微服务配置</h2><p>这里还是再我们上回的 web-log 的基础上修改</p><p>引入 logstash-logback-encoder：</p><figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--集成logstash--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>net.logstash.logback<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>logstash-logback-encoder<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>6.6<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></div></td></tr></table></figure><p>为了不影响之前的配置，我们拷贝一份 <code>logback-spring-logstash.xml</code>，并增加一个 dev profile：</p><p><img src="https://riger.oss-cn-shanghai.aliyuncs.com/img/image-20210118093533712.png" alt="image-20210118093533712"></p><p>dev 的 yml 配置如下，这里我们指定配置文件，和 Logstash的 host：</p><figure class="highlight yaml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs yaml"><span class="hljs-attr">server:</span><br>  <span class="hljs-attr">port:</span> <span class="hljs-number">8080</span><br><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">application:</span><br>    <span class="hljs-attr">name:</span> <span class="hljs-string">web-simple</span><br><span class="hljs-attr">logstash:</span><br>  <span class="hljs-attr">host:</span> <span class="hljs-number">192.168</span><span class="hljs-number">.0</span><span class="hljs-number">.2</span><br><span class="hljs-attr">logging:</span><br>  <span class="hljs-attr">level:</span><br>    <span class="hljs-attr">root:</span> <span class="hljs-string">debug</span><br>  <span class="hljs-attr">config:</span> <span class="hljs-string">classpath:logback-spring-logstash.xml</span><br></code></pre></div></td></tr></table></figure><p>log 完整配置如下：</p><figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="hljs-comment">&lt;!-- 日志级别从低到高分为TRACE &lt; DEBUG &lt; INFO &lt; WARN &lt; ERROR &lt; FATAL，如果设置为WARN，则低于WARN的信息都不会输出 --&gt;</span><br><span class="hljs-comment">&lt;!-- scan:当此属性设置为true时，配置文件如果发生改变，将会被重新加载，默认值为true --&gt;</span><br><span class="hljs-comment">&lt;!-- scanPeriod:设置监测配置文件是否有修改的时间间隔，如果没有给出时间单位，默认单位是毫秒。当scan为true时，此属性生效。默认的时间间隔为1分钟。 --&gt;</span><br><span class="hljs-comment">&lt;!-- de<span class="hljs-doctag">bug:</span>当此属性设置为true时，将打印出logback内部日志信息，实时查看logback运行状态。默认值为false。 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">configuration</span> <span class="hljs-attr">scan</span>=<span class="hljs-string">&quot;true&quot;</span> <span class="hljs-attr">scanPeriod</span>=<span class="hljs-string">&quot;60 seconds&quot;</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!--LogStash访问host--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">springProperty</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;LOG_STASH_HOST&quot;</span> <span class="hljs-attr">scope</span>=<span class="hljs-string">&quot;context&quot;</span> <span class="hljs-attr">source</span>=<span class="hljs-string">&quot;logstash.host&quot;</span> <span class="hljs-attr">defaultValue</span>=<span class="hljs-string">&quot;localhost&quot;</span>/&gt;</span><br><br>    <span class="hljs-comment">&lt;!-- ERROR日志格式,后面在对应的appender定义中指定pattern为此值，即可以按照此处的日志格式进行输出 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;FILE_ERROR_PATTERN&quot;</span></span><br><span class="hljs-tag">              <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$&#123;FILE_LOG_PATTERN:-%d&#123;$&#123;LOG_DATEFORMAT_PATTERN:-yyyy-MM-dd HH:mm:ss.SSS&#125;&#125; $&#123;LOG_LEVEL_PATTERN:-%5p&#125; $&#123;PID:- &#125; --- [%t] %-40.40logger&#123;39&#125; %file:%line: %m%n$&#123;LOG_EXCEPTION_CONVERSION_WORD:-%wEx&#125;&#125;&quot;</span>/&gt;</span><br><br>    <span class="hljs-comment">&lt;!--  日志文件位置  --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;LOG_HOME&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;logs&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;LOG_FILE_SIZE&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;100MB&quot;</span>/&gt;</span><br><br>    <span class="hljs-comment">&lt;!-- 彩色日志 --&gt;</span><br>    <span class="hljs-comment">&lt;!-- 彩色日志依赖的渲染类 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">conversionRule</span> <span class="hljs-attr">conversionWord</span>=<span class="hljs-string">&quot;clr&quot;</span> <span class="hljs-attr">converterClass</span>=<span class="hljs-string">&quot;org.springframework.boot.logging.logback.ColorConverter&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">conversionRule</span> <span class="hljs-attr">conversionWord</span>=<span class="hljs-string">&quot;wex&quot;</span></span><br><span class="hljs-tag">                    <span class="hljs-attr">converterClass</span>=<span class="hljs-string">&quot;org.springframework.boot.logging.logback.WhitespaceThrowableProxyConverter&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">conversionRule</span> <span class="hljs-attr">conversionWord</span>=<span class="hljs-string">&quot;wEx&quot;</span></span><br><span class="hljs-tag">                    <span class="hljs-attr">converterClass</span>=<span class="hljs-string">&quot;org.springframework.boot.logging.logback.ExtendedWhitespaceThrowableProxyConverter&quot;</span>/&gt;</span><br><br><br>    <span class="hljs-comment">&lt;!-- 彩色日志格式,后面在对应的appender定义中指定pattern为此值，即可以按照此处的日志格式进行输出  --&gt;</span><br>    <span class="hljs-comment">&lt;!-- 默认情况下， 自带的CONSOLE_LOG_PATTERN属性，即为彩色的，此处重新定义了个新的属性，用于演示彩色控制台的使用示例--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;CONSOLE_LOG_PATTERN_COLOR&quot;</span></span><br><span class="hljs-tag">              <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$&#123;CONSOLE_LOG_PATTERN:-%clr(%d&#123;yyyy-MM-dd HH:mm:ss.SSS&#125;)&#123;faint&#125; %clr($&#123;LOG_LEVEL_PATTERN:-%5p&#125;) %clr($&#123;PID:- &#125;)&#123;magenta&#125; %clr(---)&#123;faint&#125; %clr([%15.15t])&#123;faint&#125; %clr(%-40.40logger&#123;0&#125;)&#123;cyan&#125; %clr(:)&#123;faint&#125; %m%n$&#123;LOG_EXCEPTION_CONVERSION_WORD:-%wEx&#125;&#125;&quot;</span>/&gt;</span><br><br><br>    <span class="hljs-comment">&lt;!-- 解说下具体的pattern中属性的含义,详细参见http://logback.qos.ch/manual/layouts.html--&gt;</span><br>    <span class="hljs-comment">&lt;!-- %logger&#123;x&#125;，或者写为%c&#123;x&#125;，表示类名信息，如果x为0则表示仅输出类名，如果x大于0则尝试输出全路径，并按照指定的x值进行缩写。</span><br><span class="hljs-comment">        比如com.test.sample.Main：</span><br><span class="hljs-comment">        设置%logger&#123;0&#125;为Main</span><br><span class="hljs-comment">        设置%logger&#123;5&#125;可缩写为c.t.s.Main</span><br><span class="hljs-comment">        设置%logger&#123;20&#125;为com.test.sample.Main--&gt;</span><br>    <span class="hljs-comment">&lt;!--  %d表示日期信息(或者%date)，默认格式为【yyyy-MM-dd HH:mm:ss,SSS】，可以通过%d&#123;x&#125;自定义格式，比如%d&#123;yyyy-MM-dd HH:mm:ss.SSS&#125;--&gt;</span><br>    <span class="hljs-comment">&lt;!--  %p表示日志的level,或者%le\%level--&gt;</span><br>    <span class="hljs-comment">&lt;!--  %L表示相对应的行号，或者%line--&gt;</span><br>    <span class="hljs-comment">&lt;!--  %m表示实际的需要输出的日志内容字符串,或者%msg\%message都可以--&gt;</span><br>    <span class="hljs-comment">&lt;!--  %replace(p)&#123;r,t&#125;表示对p中给定的内容进行字符串替换，将r替换为t，支持正则，比如将p中的换行替换为下划线，防止日志攻击--&gt;</span><br>    <span class="hljs-comment">&lt;!--  %M表示方法名称，或者%method也可以--&gt;</span><br>    <span class="hljs-comment">&lt;!--  %t表示线程名称，或者%thread也可以--&gt;</span><br>    <span class="hljs-comment">&lt;!-- %ex&#123;x&#125;用于指定错误异常堆栈的打印策略，x可以为short\full或者具体数字，表示打印多少行堆栈--&gt;</span><br>    <span class="hljs-comment">&lt;!--  %n表示换行--&gt;</span><br>    <span class="hljs-comment">&lt;!-- 字符串对齐、截取、格式化说明：</span><br><span class="hljs-comment">         在上述的各个占位符中，在%和具体字符之间，可以插入格式化指令，以%c为例，如下：</span><br><span class="hljs-comment">         %20c 表示%c的内容如果不足20位，则在左侧以空格填充满20长度</span><br><span class="hljs-comment">         %-20c 与%20c相似，区别在于，会在右侧以空格填满20长度</span><br><span class="hljs-comment">         %.20c 表示%c内容如果超过20，则会截取掉开头的内容，只留下右侧20位长度</span><br><span class="hljs-comment">         %.-20c 与%.20c相似，区别在于，会截取掉末尾的内容，只留下开头20位长度</span><br><span class="hljs-comment">         以此类推，还可以组合出如下使用方式：</span><br><span class="hljs-comment">         %20.30c 表示最短20位，最长30位，如果不足20位则左侧补齐空格，如果超过30位则丢弃左侧开头的字符串</span><br><span class="hljs-comment">         %-20.30c 和%20.30c类似，区别在于不足20位的时候，在右侧补齐空格</span><br><span class="hljs-comment">         %-20.-30c 和%-20.30c类似，区别在于超过30位的时候会丢弃结尾部分的字符串</span><br><span class="hljs-comment">         %20.-30c 和20.30c类似，区别在于超过30位的时候会丢弃结尾部分的字符串</span><br><span class="hljs-comment">        --&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;SELF_DEFINE_LOG_PATTERN&quot;</span></span><br><span class="hljs-tag">              <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;[%clr(%d&#123;yyyy-MM-dd HH:mm:ss.SSS&#125;)&#123;faint&#125;] [%clr(%5.5p)&#123;magenta&#125;] [%clr(%5.10t)&#123;faint&#125;] [%clr(%30.30c&#123;0&#125;.%20.20M:%4.4L)&#123;cyan&#125;]  -&gt; %replace(%.-300m)&#123;&#x27;\r\n&#x27;,&#x27;__&#x27;&#125;%ex&#123;full&#125;%n&quot;</span>/&gt;</span><br><br>    <span class="hljs-comment">&lt;!-- Spring Boot 提供了一个默认的 xml 配置，可以按照如下方式引入 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">include</span> <span class="hljs-attr">resource</span>=<span class="hljs-string">&quot;org/springframework/boot/logging/logback/defaults.xml&quot;</span>/&gt;</span><br><br>    <span class="hljs-comment">&lt;!-- 引入application.yml配置文件，后续可以直接引用里面的属性值--&gt;</span><br>    <span class="hljs-comment">&lt;!-- 注意：在此文件中直接$&#123;&#125;的方式引用application.yml里面配置可能会报错.</span><br><span class="hljs-comment">    因为logback.xml的加载顺序早于springboot的application.yml (或application.properties) 配置文件。</span><br><span class="hljs-comment">    所以可以先springProperty的方式定义个本地变量引入进来，再进行引用此本地变量--&gt;</span><br>    <span class="hljs-comment">&lt;!-- 可以将一些公共的内容放到application.yml里面去配置，然后此文件中引用，后续可以避免修改此xml，简单的参数直接修改下application.yml就行了--&gt;</span><br>    <span class="hljs-comment">&lt;!-- 比如将日志存放路径与文件大小信息从配置中读取，这样dev和prod可以指定不同的逻辑--&gt;</span><br>    <span class="hljs-comment">&lt;!--    &lt;property resource=&quot;application.yml&quot;/&gt;--&gt;</span><br>    <span class="hljs-comment">&lt;!--    &lt;springProperty scope=&quot;context&quot; name=&quot;LOG_HOME&quot; source=&quot;selfdefine.logfile.rootPath&quot;/&gt;--&gt;</span><br>    <span class="hljs-comment">&lt;!--    &lt;springProperty scope=&quot;context&quot; name=&quot;LOG_FILE_SIZE&quot; source=&quot;selfdefine.logfile.max-size&quot;/&gt;--&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">appender</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;CONSOLE&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;ch.qos.logback.core.ConsoleAppender&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">filter</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;ch.qos.logback.classic.filter.LevelFilter&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">level</span>&gt;</span>INFO<span class="hljs-tag">&lt;/<span class="hljs-name">level</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">filter</span>&gt;</span><br>        <span class="hljs-comment">&lt;!-- 指定此append对应的日志内容的格式--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">encoder</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">pattern</span>&gt;</span>$&#123;CONSOLE_LOG_PATTERN_COLOR&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">pattern</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">charset</span>&gt;</span>UTF-8<span class="hljs-tag">&lt;/<span class="hljs-name">charset</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">encoder</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">appender</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!--  生产慎用!!! 打印方法名和行号会对性能有损耗,服务无性能要求可用  --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">appender</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;CONSOLE2&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;ch.qos.logback.core.ConsoleAppender&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">filter</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;ch.qos.logback.classic.filter.LevelFilter&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">level</span>&gt;</span>INFO<span class="hljs-tag">&lt;/<span class="hljs-name">level</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">filter</span>&gt;</span><br><br>        <span class="hljs-comment">&lt;!-- 指定此append对应的日志内容的格式--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">encoder</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">pattern</span>&gt;</span>$&#123;SELF_DEFINE_LOG_PATTERN&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">pattern</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">charset</span>&gt;</span>UTF-8<span class="hljs-tag">&lt;/<span class="hljs-name">charset</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">encoder</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">appender</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!--  文件输出，默认Info级别  --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">appender</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;FILE&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;ch.qos.logback.core.rolling.RollingFileAppender&quot;</span>&gt;</span><br>        <span class="hljs-comment">&lt;!--如果只是想要 Error 级别的日志，那么需要过滤一下，默认是 info 级别的，ThresholdFilter--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">filter</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;ch.qos.logback.classic.filter.ThresholdFilter&quot;</span>&gt;</span><br>            <span class="hljs-comment">&lt;!-- 指定过滤的日志级别，只有等于或者高于此级别的，才会通过此appender进行输出--&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">level</span>&gt;</span>Info<span class="hljs-tag">&lt;/<span class="hljs-name">level</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">filter</span>&gt;</span><br>        <span class="hljs-comment">&lt;!--日志名称，如果没有File 属性，那么只会使用FileNamePattern的文件路径规则如果同时有&lt;File&gt;和&lt;FileNamePattern&gt;，那么</span><br><span class="hljs-comment">        当天日志是&lt;File&gt;，明天会自动把今天的日志改名为今天的日期。即，&lt;File&gt; 的日志都是当天的。--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">File</span>&gt;</span>$&#123;LOG_HOME&#125;/web-log.log<span class="hljs-tag">&lt;/<span class="hljs-name">File</span>&gt;</span><br>        <span class="hljs-comment">&lt;!--滚动策略，按照时间滚动 TimeBasedRollingPolicy--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">rollingPolicy</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;ch.qos.logback.core.rolling.TimeBasedRollingPolicy&quot;</span>&gt;</span><br>            <span class="hljs-comment">&lt;!--文件路径，支持相对路径或者绝对路径（尽量避免相对路径，通过绝对路径保证存储位置的固定）,定义了日志的切分方式——把每一天的日志归档到一个文件中,以防止日志填满整个磁盘空间--&gt;</span><br>            <span class="hljs-comment">&lt;!-- 指定文件的路径以及对应的文件命名格式，其中%i表示递增标识ID序号，日志切换绕接的时候递增--&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">FileNamePattern</span>&gt;</span>$&#123;LOG_HOME&#125;/Log._%d&#123;yyyy-MM-dd&#125;.part_%i.log<span class="hljs-tag">&lt;/<span class="hljs-name">FileNamePattern</span>&gt;</span><br>            <span class="hljs-comment">&lt;!--保留日志天数--&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">maxHistory</span>&gt;</span>180<span class="hljs-tag">&lt;/<span class="hljs-name">maxHistory</span>&gt;</span><br>            <span class="hljs-comment">&lt;!--用来指定日志文件的上限大小，那么到了这个值，就会删除旧的日志--&gt;</span><br>            <span class="hljs-comment">&lt;!--&lt;totalSizeCap&gt;1GB&lt;/totalSizeCap&gt;--&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">timeBasedFileNamingAndTriggeringPolicy</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP&quot;</span>&gt;</span><br>                <span class="hljs-comment">&lt;!-- maxFileSize:这是活动文件的大小--&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">maxFileSize</span>&gt;</span>$&#123;LOG_FILE_SIZE&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">maxFileSize</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">timeBasedFileNamingAndTriggeringPolicy</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">rollingPolicy</span>&gt;</span><br>        <span class="hljs-comment">&lt;!--&lt;triggeringPolicy class=&quot;ch.qos.logback.core.rolling.SizeBasedTriggeringPolicy&quot;&gt;--&gt;</span><br>        <span class="hljs-comment">&lt;!--&lt;maxFileSize&gt;1KB&lt;/maxFileSize&gt;--&gt;</span><br>        <span class="hljs-comment">&lt;!--&lt;/triggeringPolicy&gt;--&gt;</span><br><br>        <span class="hljs-comment">&lt;!-- 指定此append对应的日志内容的格式--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">encoder</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">pattern</span>&gt;</span>$&#123;FILE_LOG_PATTERN&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">pattern</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">charset</span>&gt;</span>UTF-8<span class="hljs-tag">&lt;/<span class="hljs-name">charset</span>&gt;</span> <span class="hljs-comment">&lt;!-- 此处设置字符集 --&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">encoder</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">appender</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!--日志输出到LogStash--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">appender</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;LOGSTASH&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;net.logstash.logback.appender.LogstashTcpSocketAppender&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">destination</span>&gt;</span>$&#123;LOG_STASH_HOST&#125;:5000<span class="hljs-tag">&lt;/<span class="hljs-name">destination</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">encoder</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;net.logstash.logback.encoder.LoggingEventCompositeJsonEncoder&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">providers</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">timestamp</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">timeZone</span>&gt;</span>Asia/Shanghai<span class="hljs-tag">&lt;/<span class="hljs-name">timeZone</span>&gt;</span><br>                <span class="hljs-tag">&lt;/<span class="hljs-name">timestamp</span>&gt;</span><br>                <span class="hljs-comment">&lt;!--自定义日志输出格式--&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">pattern</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">pattern</span>&gt;</span><br>                        &#123;<br>                        &quot;project&quot;: &quot;web-mall&quot;,<br>                        &quot;level&quot;: &quot;%level&quot;,<br>                        &quot;service&quot;: &quot;$&#123;APP_NAME:-&#125;&quot;,<br>                        &quot;pid&quot;: &quot;$&#123;PID:-&#125;&quot;,<br>                        &quot;thread&quot;: &quot;%thread&quot;,<br>                        &quot;class&quot;: &quot;%logger&quot;,<br>                        &quot;message&quot;: &quot;%message&quot;,<br>                        &quot;stack_trace&quot;: &quot;%exception&#123;20&#125;&quot;<br>                        &#125;<br>                    <span class="hljs-tag">&lt;/<span class="hljs-name">pattern</span>&gt;</span><br>                <span class="hljs-tag">&lt;/<span class="hljs-name">pattern</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">providers</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">encoder</span>&gt;</span><br>        <span class="hljs-comment">&lt;!--当有多个LogStash服务时，设置访问策略为轮询--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">connectionStrategy</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">roundRobin</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">connectionTTL</span>&gt;</span>5 minutes<span class="hljs-tag">&lt;/<span class="hljs-name">connectionTTL</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">roundRobin</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">connectionStrategy</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">appender</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!-- 指定日志输出到哪些位置、以及root日志的输出level--&gt;</span><br>    <span class="hljs-comment">&lt;!-- 默认情况下的使用，任何spring profile值情况下都会使用下面的配置，即输出到console中--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">root</span> <span class="hljs-attr">level</span>=<span class="hljs-string">&quot;info&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">appender-ref</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;CONSOLE2&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">root</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!-- 在SpringBoot中，可以通过springProfile属性来实现在不同环境上执行不同的输出策略，如下示例中指定pro和dev上有不同的策略--&gt;</span><br>    <span class="hljs-comment">&lt;!-- 指定在prod环境使用的输出配置--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">springProfile</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;pro&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">root</span> <span class="hljs-attr">level</span>=<span class="hljs-string">&quot;info&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">appender-ref</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;FILE&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">root</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">springProfile</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!-- 指定在dev环境使用的输出配置--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">springProfile</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;dev&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">root</span> <span class="hljs-attr">level</span>=<span class="hljs-string">&quot;info&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">appender-ref</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;FILE&quot;</span>/&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">appender-ref</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;LOGSTASH&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">root</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">springProfile</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">configuration</span>&gt;</span><br></code></pre></div></td></tr></table></figure><p>然后在 IDEA 的启动选项里指定 dev ，启动应用：</p><p><img src="https://riger.oss-cn-shanghai.aliyuncs.com/img/image-20210118094236012.png" alt="image-20210118094236012"></p><p>再访问一下测试请求：</p><p><img src="https://riger.oss-cn-shanghai.aliyuncs.com/img/image-20210118094448871.png" alt="image-20210118094448871"></p><h2 id="5-日志查询"><a href="#5-日志查询" class="headerlink" title="5. 日志查询"></a>5. 日志查询</h2><p>我们刷新 Kibana：</p><p><img src="https://riger.oss-cn-shanghai.aliyuncs.com/img/image-20210118094657559.png" alt="image-20210118094657559"></p><p>由于我们日志等级是 debug，所以进来了大量日志</p><p>这个时候左侧可以看到 左侧很多字段都是 unknown field，我们的日志内容在 <code>message</code>里，我们需要刷新一下字段：</p><p><img src="https://riger.oss-cn-shanghai.aliyuncs.com/img/image-20210118095848233.png" alt="image-20210118095848233"></p><p>再回来刷新就发现字段已经正常了：</p><p><img src="https://riger.oss-cn-shanghai.aliyuncs.com/img/image-20210118101245092.png" alt="image-20210118101245092"></p><p>我前面的日志打印了时间戳：<code>1610934226338</code></p><p>我们搜索一下看看，搜索栏输入：<code>message : *1610934226338*</code></p><p><img src="https://riger.oss-cn-shanghai.aliyuncs.com/img/image-20210118101345054.png" alt="image-20210118101345054"></p><p>可以看到，能正常搜索到日志</p><p>我们展开日志，可以更清晰地看到信息：</p><p><img src="https://riger.oss-cn-shanghai.aliyuncs.com/img/image-20210118101404856.png" alt="image-20210118101404856"></p><p>我们还可以按我们想要的格式展现日志：比如 project + ip + message，在左侧上点 + 号添加：</p><p><img src="https://riger.oss-cn-shanghai.aliyuncs.com/img/image-20210118101750772.png" alt="image-20210118101750772"></p><p>至此，我们完成了日志的统一存储、查询</p><p>其实我们还可以分场景收集日志，比如分访问日志、应用日志、错误日志，可以用于访问量统计，日志查询，错误监控等</p><p>在 LogStash 的 input 配置多个端口，配置不同的 type，然后根据 type 创建不同的 ES index 即可</p><p>可以根据业务需要去配置，这里就不细展开了</p><p>好了，本篇到此结束，希望对你有帮助！</p><p>源码及脚本都在<a href="https://github.com/RigerWu/web-starter-demos">Github</a>上</p><p>Enjoy it!</p>]]></content>
    
    
    <categories>
      
      <category>spring boot</category>
      
    </categories>
    
    
    <tags>
      
      <tag>log</tag>
      
      <tag>logstash</tag>
      
      <tag>elk</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SpringBoot Logback日志打印详解</title>
    <link href="/2021/01/13/web-log-logback/"/>
    <url>/2021/01/13/web-log-logback/</url>
    
    <content type="html"><![CDATA[<h1 id="SpringBoot-Logback-日志打印详解"><a href="#SpringBoot-Logback-日志打印详解" class="headerlink" title="SpringBoot Logback 日志打印详解"></a>SpringBoot Logback 日志打印详解</h1><h2 id="1-为什么不要用-println"><a href="#1-为什么不要用-println" class="headerlink" title="1. 为什么不要用 println"></a>1. 为什么不要用 println</h2><p>日志打印对于后端服务来说是极其重要的，很多时候我们定位问题都需要去 log 里找</p><p>Java 初学阶段，我们会经常用 <code>System.out.println()</code>来打印 log，但是实际开发千万不要这么做</p><p>一来不够灵活，不能存文件、不能区分级别、不能配置开关</p><p>二来<code>println</code>有很大的性能问题</p><p>我们看看 <code>println</code>的源码：</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">println</span><span class="hljs-params">(String x)</span> </span>&#123;<br>  <span class="hljs-keyword">synchronized</span> (<span class="hljs-keyword">this</span>) &#123;<br>    print(x);<br>    newLine();<br>  &#125;<br>&#125;<br><span class="hljs-comment">// print() 后面会调用 write()</span><br><span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">write</span><span class="hljs-params">(String s)</span> </span>&#123;<br>  <span class="hljs-keyword">try</span> &#123;<br>    <span class="hljs-keyword">synchronized</span> (<span class="hljs-keyword">this</span>) &#123;<br>      ensureOpen();<br>      textOut.write(s);<br>      textOut.flushBuffer();<br>      charOut.flushBuffer();<br>      <span class="hljs-keyword">if</span> (autoFlush &amp;&amp; (s.indexOf(<span class="hljs-string">&#x27;\n&#x27;</span>) &gt;= <span class="hljs-number">0</span>))<br>        out.flush();<br>    &#125;<br>  &#125;<br>  <span class="hljs-keyword">catch</span> (InterruptedIOException x) &#123;<br>    Thread.currentThread().interrupt();<br>  &#125;<br>  <span class="hljs-keyword">catch</span> (IOException x) &#123;<br>    trouble = <span class="hljs-keyword">true</span>;<br>  &#125;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">newLine</span><span class="hljs-params">()</span> </span>&#123;<br>  <span class="hljs-keyword">try</span> &#123;<br>    <span class="hljs-keyword">synchronized</span> (<span class="hljs-keyword">this</span>) &#123;<br>      ensureOpen();<br>      textOut.newLine();<br>      textOut.flushBuffer();<br>      charOut.flushBuffer();<br>      <span class="hljs-keyword">if</span> (autoFlush)<br>        out.flush();<br>    &#125;<br>  &#125;<br>  <span class="hljs-keyword">catch</span> (InterruptedIOException x) &#123;<br>    Thread.currentThread().interrupt();<br>  &#125;<br>  <span class="hljs-keyword">catch</span> (IOException x) &#123;<br>    trouble = <span class="hljs-keyword">true</span>;<br>  &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>可以看到，<code>System.out.println</code>方法使用了许多 <code>synchronized</code> 关键字，如果打印的内容比较长，并发高的情况下十分影响性能</p><p>所以开发中，我们都会使用相应的日志框架来打印日志，可以用配置文件实现灵活的配置</p><h2 id="2-日志门面与日志实现"><a href="#2-日志门面与日志实现" class="headerlink" title="2. 日志门面与日志实现"></a>2. 日志门面与日志实现</h2><p>日志框架分为两类，门面和实现，门面可以理解为定义了日志要怎么打，实现就是具体去打日志</p><p>门面：JCL(Jakarta Commons Logging) jboss-logging <strong>SLF4j</strong></p><p>实现：Log4j JUL(java.util.logging) Log4j2 <strong>Logback</strong></p><p>SpringBoot 使用 SLF4j 作为日志门面</p><p>如果我们使用 SpringBoot 的相应 starters，那么默认使用的日志实现框架就是 <a href="http://logback.qos.ch/index.html">Logback</a></p><p><img src="https://riger.oss-cn-shanghai.aliyuncs.com/img/image-20210113113141250.png" alt="image-20210113113141250"></p><p>各个日志实现的配置文件：</p><table><thead><tr><th align="center">框架</th><th align="center">配置文件</th></tr></thead><tbody><tr><td align="center">Logback</td><td align="center">logback-spring.xml, logback-spring.groovy, logback.xml, or logback.groovy</td></tr><tr><td align="center">Log4j2</td><td align="center">log4j2-spring.xml or log4j2.xml</td></tr><tr><td align="center">JUL</td><td align="center">logging.properties</td></tr></tbody></table><p>Spring Boot 官方推荐使用 <code>-spring</code>后缀的配置文件，这样 Spring 可以完全控制日志的初始化，日志也可以使用 Profile</p><h2 id="3-Logback-介绍"><a href="#3-Logback-介绍" class="headerlink" title="3. Logback 介绍"></a>3. Logback 介绍</h2><p>Logback 是以前非常流畅的日志框架 Log4j 的继任者，它更小，但性能更强，更多优点看<a href="http://logback.qos.ch/reasonsToSwitch.html">官方文档</a></p><p>它实现了日志门面 Slf4j，我们日志打印使用接口抽象即可：</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> Log log = LogFactory.getLog(ClassName.class);<br></code></pre></div></td></tr></table></figure><p>这样允许我们方便地切换到别的日志框架如 Log4j</p><p>通常我们可以引用 Lombok，这样直接在类上加上 <code>@Slf4j</code>注解就可以直接打印 log：</p><figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.projectlombok<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>lombok<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.18.16<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>provided<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></div></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-meta">@RestController</span><br><span class="hljs-meta">@Slf4j</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">LogController</span> </span>&#123;<br><br>    <span class="hljs-meta">@GetMapping(&quot;/log&quot;)</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">hello</span><span class="hljs-params">()</span> </span>&#123;<br>        String s = <span class="hljs-string">&quot;log print test&quot;</span>;<br>        log.debug(s);<br>        log.info(s);<br>        log.error(s);<br>        log.warn(s);<br>        <span class="hljs-keyword">return</span> s;<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="4-Logback-配置文件"><a href="#4-Logback-配置文件" class="headerlink" title="4. Logback 配置文件"></a>4. Logback 配置文件</h2><p>这里给出我常用的<code>logback-spring.xml</code>，注释很详细，可以自行修改内容</p><figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="hljs-comment">&lt;!-- 日志级别从低到高分为TRACE &lt; DEBUG &lt; INFO &lt; WARN &lt; ERROR &lt; FATAL，如果设置为WARN，则低于WARN的信息都不会输出 --&gt;</span><br><span class="hljs-comment">&lt;!-- scan:当此属性设置为true时，配置文件如果发生改变，将会被重新加载，默认值为true --&gt;</span><br><span class="hljs-comment">&lt;!-- scanPeriod:设置监测配置文件是否有修改的时间间隔，如果没有给出时间单位，默认单位是毫秒。当scan为true时，此属性生效。默认的时间间隔为1分钟。 --&gt;</span><br><span class="hljs-comment">&lt;!-- de<span class="hljs-doctag">bug:</span>当此属性设置为true时，将打印出logback内部日志信息，实时查看logback运行状态。默认值为false。 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">configuration</span> <span class="hljs-attr">scan</span>=<span class="hljs-string">&quot;true&quot;</span> <span class="hljs-attr">scanPeriod</span>=<span class="hljs-string">&quot;60 seconds&quot;</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- ERROR日志格式,后面在对应的appender定义中指定pattern为此值，即可以按照此处的日志格式进行输出 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;FILE_ERROR_PATTERN&quot;</span></span><br><span class="hljs-tag">              <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$&#123;FILE_LOG_PATTERN:-%d&#123;$&#123;LOG_DATEFORMAT_PATTERN:-yyyy-MM-dd HH:mm:ss.SSS&#125;&#125; $&#123;LOG_LEVEL_PATTERN:-%5p&#125; $&#123;PID:- &#125; --- [%t] %-40.40logger&#123;39&#125; %file:%line: %m%n$&#123;LOG_EXCEPTION_CONVERSION_WORD:-%wEx&#125;&#125;&quot;</span>/&gt;</span><br><br>    <span class="hljs-comment">&lt;!--  日志文件位置  --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;LOG_HOME&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;logs&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;LOG_FILE_SIZE&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;100MB&quot;</span>/&gt;</span><br><br>    <span class="hljs-comment">&lt;!-- 彩色日志 --&gt;</span><br>    <span class="hljs-comment">&lt;!-- 彩色日志依赖的渲染类 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">conversionRule</span> <span class="hljs-attr">conversionWord</span>=<span class="hljs-string">&quot;clr&quot;</span> <span class="hljs-attr">converterClass</span>=<span class="hljs-string">&quot;org.springframework.boot.logging.logback.ColorConverter&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">conversionRule</span> <span class="hljs-attr">conversionWord</span>=<span class="hljs-string">&quot;wex&quot;</span></span><br><span class="hljs-tag">                    <span class="hljs-attr">converterClass</span>=<span class="hljs-string">&quot;org.springframework.boot.logging.logback.WhitespaceThrowableProxyConverter&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">conversionRule</span> <span class="hljs-attr">conversionWord</span>=<span class="hljs-string">&quot;wEx&quot;</span></span><br><span class="hljs-tag">                    <span class="hljs-attr">converterClass</span>=<span class="hljs-string">&quot;org.springframework.boot.logging.logback.ExtendedWhitespaceThrowableProxyConverter&quot;</span>/&gt;</span><br><br><br>    <span class="hljs-comment">&lt;!-- 彩色日志格式,后面在对应的appender定义中指定pattern为此值，即可以按照此处的日志格式进行输出  --&gt;</span><br>    <span class="hljs-comment">&lt;!-- 默认情况下， 自带的CONSOLE_LOG_PATTERN属性，即为彩色的，此处重新定义了个新的属性，用于演示彩色控制台的使用示例--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;CONSOLE_LOG_PATTERN_COLOR&quot;</span></span><br><span class="hljs-tag">              <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$&#123;CONSOLE_LOG_PATTERN:-%clr(%d&#123;yyyy-MM-dd HH:mm:ss.SSS&#125;)&#123;faint&#125; %clr($&#123;LOG_LEVEL_PATTERN:-%5p&#125;) %clr($&#123;PID:- &#125;)&#123;magenta&#125; %clr(---)&#123;faint&#125; %clr([%15.15t])&#123;faint&#125; %clr(%-40.40logger&#123;0&#125;)&#123;cyan&#125; %clr(:)&#123;faint&#125; %m%n$&#123;LOG_EXCEPTION_CONVERSION_WORD:-%wEx&#125;&#125;&quot;</span>/&gt;</span><br><br><br>    <span class="hljs-comment">&lt;!-- 解说下具体的pattern中属性的含义,详细参见http://logback.qos.ch/manual/layouts.html--&gt;</span><br>    <span class="hljs-comment">&lt;!-- %logger&#123;x&#125;，或者写为%c&#123;x&#125;，表示类名信息，如果x为0则表示仅输出类名，如果x大于0则尝试输出全路径，并按照指定的x值进行缩写。</span><br><span class="hljs-comment">        比如com.test.sample.Main：</span><br><span class="hljs-comment">        设置%logger&#123;0&#125;为Main</span><br><span class="hljs-comment">        设置%logger&#123;5&#125;可缩写为c.t.s.Main</span><br><span class="hljs-comment">        设置%logger&#123;20&#125;为com.test.sample.Main--&gt;</span><br>    <span class="hljs-comment">&lt;!--  %d表示日期信息(或者%date)，默认格式为【yyyy-MM-dd HH:mm:ss,SSS】，可以通过%d&#123;x&#125;自定义格式，比如%d&#123;yyyy-MM-dd HH:mm:ss.SSS&#125;--&gt;</span><br>    <span class="hljs-comment">&lt;!--  %p表示日志的level,或者%le\%level--&gt;</span><br>    <span class="hljs-comment">&lt;!--  %L表示相对应的行号，或者%line--&gt;</span><br>    <span class="hljs-comment">&lt;!--  %m表示实际的需要输出的日志内容字符串,或者%msg\%message都可以--&gt;</span><br>    <span class="hljs-comment">&lt;!--  %replace(p)&#123;r,t&#125;表示对p中给定的内容进行字符串替换，将r替换为t，支持正则，比如将p中的换行替换为下划线，防止日志攻击--&gt;</span><br>    <span class="hljs-comment">&lt;!--  %M表示方法名称，或者%method也可以--&gt;</span><br>    <span class="hljs-comment">&lt;!--  %t表示线程名称，或者%thread也可以--&gt;</span><br>    <span class="hljs-comment">&lt;!-- %ex&#123;x&#125;用于指定错误异常堆栈的打印策略，x可以为short\full或者具体数字，表示打印多少行堆栈--&gt;</span><br>    <span class="hljs-comment">&lt;!--  %n表示换行--&gt;</span><br>    <span class="hljs-comment">&lt;!-- 字符串对齐、截取、格式化说明：</span><br><span class="hljs-comment">         在上述的各个占位符中，在%和具体字符之间，可以插入格式化指令，以%c为例，如下：</span><br><span class="hljs-comment">         %20c 表示%c的内容如果不足20位，则在左侧以空格填充满20长度</span><br><span class="hljs-comment">         %-20c 与%20c相似，区别在于，会在右侧以空格填满20长度</span><br><span class="hljs-comment">         %.20c 表示%c内容如果超过20，则会截取掉开头的内容，只留下右侧20位长度</span><br><span class="hljs-comment">         %.-20c 与%.20c相似，区别在于，会截取掉末尾的内容，只留下开头20位长度</span><br><span class="hljs-comment">         以此类推，还可以组合出如下使用方式：</span><br><span class="hljs-comment">         %20.30c 表示最短20位，最长30位，如果不足20位则左侧补齐空格，如果超过30位则丢弃左侧开头的字符串</span><br><span class="hljs-comment">         %-20.30c 和%20.30c类似，区别在于不足20位的时候，在右侧补齐空格</span><br><span class="hljs-comment">         %-20.-30c 和%-20.30c类似，区别在于超过30位的时候会丢弃结尾部分的字符串</span><br><span class="hljs-comment">         %20.-30c 和20.30c类似，区别在于超过30位的时候会丢弃结尾部分的字符串</span><br><span class="hljs-comment">        --&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;SELF_DEFINE_LOG_PATTERN&quot;</span></span><br><span class="hljs-tag">              <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;[%clr(%d&#123;yyyy-MM-dd HH:mm:ss.SSS&#125;)&#123;faint&#125;] [%clr(%5.5p)&#123;magenta&#125;] [%clr(%5.10t)&#123;faint&#125;] [%clr(%30.30c&#123;0&#125;.%20.20M:%4.4L)&#123;cyan&#125;]  -&gt; %replace(%.-300m)&#123;&#x27;\r\n&#x27;,&#x27;__&#x27;&#125;%ex&#123;full&#125;%n&quot;</span>/&gt;</span><br><br>    <span class="hljs-comment">&lt;!-- Spring Boot 提供了一个默认的 xml 配置，可以按照如下方式引入 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">include</span> <span class="hljs-attr">resource</span>=<span class="hljs-string">&quot;org/springframework/boot/logging/logback/defaults.xml&quot;</span>/&gt;</span><br><br>    <span class="hljs-comment">&lt;!-- 引入application.yml配置文件，后续可以直接引用里面的属性值--&gt;</span><br>    <span class="hljs-comment">&lt;!-- 注意：在此文件中直接$&#123;&#125;的方式引用application.yml里面配置可能会报错.</span><br><span class="hljs-comment">    因为logback.xml的加载顺序早于springboot的application.yml (或application.properties) 配置文件。</span><br><span class="hljs-comment">    所以可以先springProperty的方式定义个本地变量引入进来，再进行引用此本地变量--&gt;</span><br>    <span class="hljs-comment">&lt;!-- 可以将一些公共的内容放到application.yml里面去配置，然后此文件中引用，后续可以避免修改此xml，简单的参数直接修改下application.yml就行了--&gt;</span><br>    <span class="hljs-comment">&lt;!-- 比如将日志存放路径与文件大小信息从配置中读取，这样dev和prod可以指定不同的逻辑--&gt;</span><br>    <span class="hljs-comment">&lt;!--    &lt;property resource=&quot;application.yml&quot;/&gt;--&gt;</span><br>    <span class="hljs-comment">&lt;!--    &lt;springProperty scope=&quot;context&quot; name=&quot;LOG_HOME&quot; source=&quot;selfdefine.logfile.rootPath&quot;/&gt;--&gt;</span><br>    <span class="hljs-comment">&lt;!--    &lt;springProperty scope=&quot;context&quot; name=&quot;LOG_FILE_SIZE&quot; source=&quot;selfdefine.logfile.max-size&quot;/&gt;--&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">appender</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;CONSOLE&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;ch.qos.logback.core.ConsoleAppender&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">filter</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;ch.qos.logback.classic.filter.LevelFilter&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">level</span>&gt;</span>INFO<span class="hljs-tag">&lt;/<span class="hljs-name">level</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">filter</span>&gt;</span><br>        <span class="hljs-comment">&lt;!-- 指定此append对应的日志内容的格式--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">encoder</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">pattern</span>&gt;</span>$&#123;CONSOLE_LOG_PATTERN_COLOR&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">pattern</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">charset</span>&gt;</span>UTF-8<span class="hljs-tag">&lt;/<span class="hljs-name">charset</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">encoder</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">appender</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!--  生产慎用!!! 打印方法名和行号会对性能有损耗,服务无性能要求可用  --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">appender</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;CONSOLE2&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;ch.qos.logback.core.ConsoleAppender&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">filter</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;ch.qos.logback.classic.filter.LevelFilter&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">level</span>&gt;</span>INFO<span class="hljs-tag">&lt;/<span class="hljs-name">level</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">filter</span>&gt;</span><br><br>        <span class="hljs-comment">&lt;!-- 指定此append对应的日志内容的格式--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">encoder</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">pattern</span>&gt;</span>$&#123;SELF_DEFINE_LOG_PATTERN&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">pattern</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">charset</span>&gt;</span>UTF-8<span class="hljs-tag">&lt;/<span class="hljs-name">charset</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">encoder</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">appender</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!--  文件输出，默认Info级别  --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">appender</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;FILE&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;ch.qos.logback.core.rolling.RollingFileAppender&quot;</span>&gt;</span><br>        <span class="hljs-comment">&lt;!--如果只是想要 Error 级别的日志，那么需要过滤一下，默认是 info 级别的，ThresholdFilter--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">filter</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;ch.qos.logback.classic.filter.ThresholdFilter&quot;</span>&gt;</span><br>            <span class="hljs-comment">&lt;!-- 指定过滤的日志级别，只有等于或者高于此级别的，才会通过此appender进行输出--&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">level</span>&gt;</span>Info<span class="hljs-tag">&lt;/<span class="hljs-name">level</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">filter</span>&gt;</span><br>        <span class="hljs-comment">&lt;!--日志名称，如果没有File 属性，那么只会使用FileNamePattern的文件路径规则如果同时有&lt;File&gt;和&lt;FileNamePattern&gt;，那么</span><br><span class="hljs-comment">        当天日志是&lt;File&gt;，明天会自动把今天的日志改名为今天的日期。即，&lt;File&gt; 的日志都是当天的。--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">File</span>&gt;</span>$&#123;LOG_HOME&#125;/web-log.log<span class="hljs-tag">&lt;/<span class="hljs-name">File</span>&gt;</span><br>        <span class="hljs-comment">&lt;!--滚动策略，按照时间滚动 TimeBasedRollingPolicy--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">rollingPolicy</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;ch.qos.logback.core.rolling.TimeBasedRollingPolicy&quot;</span>&gt;</span><br>            <span class="hljs-comment">&lt;!--文件路径，支持相对路径或者绝对路径（尽量避免相对路径，通过绝对路径保证存储位置的固定）,定义了日志的切分方式——把每一天的日志归档到一个文件中,以防止日志填满整个磁盘空间--&gt;</span><br>            <span class="hljs-comment">&lt;!-- 指定文件的路径以及对应的文件命名格式，其中%i表示递增标识ID序号，日志切换绕接的时候递增--&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">FileNamePattern</span>&gt;</span>$&#123;LOG_HOME&#125;/Log._%d&#123;yyyy-MM-dd&#125;.part_%i.log<span class="hljs-tag">&lt;/<span class="hljs-name">FileNamePattern</span>&gt;</span><br>            <span class="hljs-comment">&lt;!--保留日志天数--&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">maxHistory</span>&gt;</span>180<span class="hljs-tag">&lt;/<span class="hljs-name">maxHistory</span>&gt;</span><br>            <span class="hljs-comment">&lt;!--用来指定日志文件的上限大小，那么到了这个值，就会删除旧的日志--&gt;</span><br>            <span class="hljs-comment">&lt;!--&lt;totalSizeCap&gt;1GB&lt;/totalSizeCap&gt;--&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">timeBasedFileNamingAndTriggeringPolicy</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP&quot;</span>&gt;</span><br>                <span class="hljs-comment">&lt;!-- maxFileSize:这是活动文件的大小--&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">maxFileSize</span>&gt;</span>$&#123;LOG_FILE_SIZE&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">maxFileSize</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">timeBasedFileNamingAndTriggeringPolicy</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">rollingPolicy</span>&gt;</span><br>        <span class="hljs-comment">&lt;!--&lt;triggeringPolicy class=&quot;ch.qos.logback.core.rolling.SizeBasedTriggeringPolicy&quot;&gt;--&gt;</span><br>        <span class="hljs-comment">&lt;!--&lt;maxFileSize&gt;1KB&lt;/maxFileSize&gt;--&gt;</span><br>        <span class="hljs-comment">&lt;!--&lt;/triggeringPolicy&gt;--&gt;</span><br><br>        <span class="hljs-comment">&lt;!-- 指定此append对应的日志内容的格式--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">encoder</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">pattern</span>&gt;</span>$&#123;FILE_LOG_PATTERN&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">pattern</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">charset</span>&gt;</span>UTF-8<span class="hljs-tag">&lt;/<span class="hljs-name">charset</span>&gt;</span> <span class="hljs-comment">&lt;!-- 此处设置字符集 --&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">encoder</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">appender</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!-- 指定日志输出到哪些位置、以及root日志的输出level--&gt;</span><br>    <span class="hljs-comment">&lt;!-- 默认情况下的使用，任何spring profile值情况下都会使用下面的配置，即输出到console中--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">root</span> <span class="hljs-attr">level</span>=<span class="hljs-string">&quot;info&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">appender-ref</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;CONSOLE2&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">root</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!-- 在SpringBoot中，可以通过springProfile属性来实现在不同环境上执行不同的输出策略，如下示例中指定pro和dev上有不同的策略--&gt;</span><br>    <span class="hljs-comment">&lt;!-- 指定在prod环境使用的输出配置--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">springProfile</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;pro&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">root</span> <span class="hljs-attr">level</span>=<span class="hljs-string">&quot;info&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">appender-ref</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;FILE&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">root</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">springProfile</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!-- 指定在dev环境使用的输出配置--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">springProfile</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;dev&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">root</span> <span class="hljs-attr">level</span>=<span class="hljs-string">&quot;info&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">appender-ref</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;FILE&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">root</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">springProfile</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">configuration</span>&gt;</span><br></code></pre></div></td></tr></table></figure><p>这里还是要再强调一下，对于并发或性能要求高的服务，不要打印方法名和行号，会影响性能</p><p>参见 Logbak 的官方文档</p><blockquote><p>Generating the method name is not particularly fast. Thus, its use should be avoided unless execution speed is not an issue.</p><p>Generating the line number information is not particularly fast. Thus, its use should be avoided unless execution speed is not an issue.</p></blockquote><p>看一下使用我自定义的 Pattern 打印的带颜色行号的日志格式：</p><p><img src="https://riger.oss-cn-shanghai.aliyuncs.com/img/image-20210113155958249.png" alt="image-20210113155958249"></p><h2 id="5-日志等级"><a href="#5-日志等级" class="headerlink" title="5. 日志等级"></a>5. 日志等级</h2><p>默认等级在配置文件里配置，我们还可以手动配置指定包名、类名的日志等级：</p><figure class="highlight yaml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs yaml"><span class="hljs-attr">logging:</span><br>  <span class="hljs-attr">level:</span><br>    <span class="hljs-attr">root:</span> <span class="hljs-string">&quot;warn&quot;</span><br>    <span class="hljs-attr">org.springframework.web:</span> <span class="hljs-string">&quot;debug&quot;</span><br>    <span class="hljs-attr">org.hibernate:</span> <span class="hljs-string">&quot;error&quot;</span><br></code></pre></div></td></tr></table></figure><p>还可以给一些包分组，分组后一次性配置：</p><figure class="highlight yaml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs yaml"><span class="hljs-attr">logging:</span><br>  <span class="hljs-attr">group:</span><br>    <span class="hljs-attr">tomcat:</span> <span class="hljs-string">&quot;org.apache.catalina,org.apache.coyote,org.apache.tomcat&quot;</span><br>  <span class="hljs-attr">level:</span><br>  <span class="hljs-attr">tomcat:</span> <span class="hljs-string">&quot;trace&quot;</span><br></code></pre></div></td></tr></table></figure><p>Spring Boot 预定义了两个分组</p><table><thead><tr><th>Name</th><th>Loggers</th></tr></thead><tbody><tr><td>web</td><td>org.springframework.core.codec, org.springframework.http,org.springframework.web, org.springframework.boot.actuate.endpoint.web, org.springframework.boot.web.servlet.ServletContextInitializerBeans</td></tr><tr><td>sql</td><td>org.springframework.jdbc.core, org.hibernate.SQL, org.jooq.tools.LoggerListener</td></tr></tbody></table><h2 id="6-统一日志输出"><a href="#6-统一日志输出" class="headerlink" title="6. 统一日志输出"></a>6. 统一日志输出</h2><p>我用了一个开源项目 XXX，它日志框架用的是 Log4j ，我怎么统一用 SLF4j+Logback 来输出？</p><p>SLF4j 官方文档给出了下图的指引：</p><p><img src="https://riger.oss-cn-shanghai.aliyuncs.com/img/legacy.png" alt="img"></p><p>已切换 Log4j 为例：</p><p>我们只需要引入 <code>log4j-over-slf4j.jar</code>,然后把开源项目的 log4j 依赖排除即可</p><figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- 这三个依赖可以根据需要选择 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.slf4j<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>jcl-over-slf4j<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>$&#123;org.slf4j-version&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.slf4j<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>log4j-over-slf4j<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>$&#123;org.slf4j-version&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.slf4j<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>jul-to-slf4j<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>$&#123;org.slf4j-version&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></div></td></tr></table></figure><p>篇幅有限，分布式环境的日志统一存储，下一篇再讲。</p><p>源码及脚本都在<a href="https://github.com/RigerWu/web-starter-demos">Github</a>上</p><p>Enjoy it!</p>]]></content>
    
    
    <categories>
      
      <category>spring boot</category>
      
    </categories>
    
    
    <tags>
      
      <tag>log</tag>
      
      <tag>logback</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SpringBoot工程的创建运行发布</title>
    <link href="/2021/01/10/web-simple-springboot/"/>
    <url>/2021/01/10/web-simple-springboot/</url>
    
    <content type="html"><![CDATA[<h1 id="Idea创建SrpingBoot工程"><a href="#Idea创建SrpingBoot工程" class="headerlink" title="Idea创建SrpingBoot工程"></a>Idea创建SrpingBoot工程</h1><h2 id="1-创建"><a href="#1-创建" class="headerlink" title="1. 创建"></a>1. 创建</h2><p>由于博客的示例代码都放在<code>web-starter-demos</code>项目里，所以这里我创建的是<code>module</code>而不是<code>project</code></p><p>我们使用官方的<code>Spring Initializr</code>来初始化工程，jdk选择1.8：</p><p><img src="https://riger.oss-cn-shanghai.aliyuncs.com/img/image-20210112102036076.png" alt="image-20210112102036076"></p><p>填好<code>Group</code>,<code>Artifact</code>,选择<code>Java Version</code>为8，点击<code>Next</code>：</p><p><img src="https://riger.oss-cn-shanghai.aliyuncs.com/img/image-20210112102749459.png" alt="image-20210112102749459"></p><p><code>Spring Boot</code>我选择目前最新的稳定版本2.4.1，你可以在<a href="https://spring.io/projects/spring-boot#learn">官网</a>查询最新GA版本</p><p>同时这个界面还能让我们方便得选择一些开发常用的依赖，本文的简单项目，我们只添加以下两个，点击<code>Next</code>：</p><p><img src="https://riger.oss-cn-shanghai.aliyuncs.com/img/image-20210112135337955.png" alt="image-20210112135337955"></p><p>填好<code>Module Name</code>，点击<code>Finish</code>：</p><p><img src="https://riger.oss-cn-shanghai.aliyuncs.com/img/image-20210112103919173.png" alt="image-20210112103919173"></p><p>我们得到了如下目录结构的工程：</p><p><img src="https://riger.oss-cn-shanghai.aliyuncs.com/img/image-20210112105357563.png" alt="image-20210112105357563"></p><h2 id="2-运行"><a href="#2-运行" class="headerlink" title="2. 运行"></a>2. 运行</h2><p>我们直接点击主类的启动按钮：</p><p><img src="https://riger.oss-cn-shanghai.aliyuncs.com/img/image-20210112105444193.png" alt="image-20210112105444193"></p><p>项目就运行起来了：</p><p><img src="https://riger.oss-cn-shanghai.aliyuncs.com/img/image-20210112105538899.png" alt="image-20210112105538899"></p><p>可以看到默认情况下，项目运行在8080端口</p><h2 id="3-优化"><a href="#3-优化" class="headerlink" title="3. 优化"></a>3. 优化</h2><p>作为开发者，我们电脑上肯定有装 <code>Maven</code>并配置了环境变量，所以我们不需要工程初始化带的<code>Maven Wrapper</code></p><p>由于我这里是<code>module</code> 外层<code>.gitignore</code>已经做了全局配置，这里也不需要，帮助文档也删掉</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">rm -rf .mvn mvnw* .gitignore HELP.md<br></code></pre></div></td></tr></table></figure><p>建议使用<code>yml</code>配置，我们把<code>application.properties</code> 改成 <code>application.yml</code></p><p>一般建议显示指定端口号和服务名：</p><figure class="highlight yaml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs yaml"><span class="hljs-attr">server:</span><br>  <span class="hljs-attr">port:</span> <span class="hljs-number">8080</span><br><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">application:</span><br>    <span class="hljs-attr">name:</span> <span class="hljs-string">web-simple</span><br></code></pre></div></td></tr></table></figure><p>编辑一下 IDE 里的运行配置：</p><p><img src="https://riger.oss-cn-shanghai.aliyuncs.com/img/image-20210112135821537.png" alt="image-20210112135821537"></p><p>这里可以设置虚拟机参数，环境变量等：</p><p><img src="https://riger.oss-cn-shanghai.aliyuncs.com/img/image-20210112140241936.png" alt="image-20210112140241936"></p><p>如图，一般开发的时候，我会指定比较小的堆内存大小，这样可以启动多个服务而不卡</p><p>还可以指定服务端口，比如要跑多个服务，直接点左上角复制一份配置，改个端口号就可以</p><p>以及可以指定 <code>profile</code>，比如区分开发环境、生产环境等，不需要改配置文件，即可指定启动</p><h2 id="4-请求"><a href="#4-请求" class="headerlink" title="4. 请求"></a>4. 请求</h2><p>我们编写一个简单的<code>Controller</code></p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-meta">@RestController</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">HelloController</span> </span>&#123;<br>    <span class="hljs-meta">@GetMapping(&quot;/hello&quot;)</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">hello</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Hello World!&quot;</span>;<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>运行后可以直接访问，这里我使用插件<a href="https://plugins.jetbrains.com/plugin/14280-restfultool">RestfullTool</a>来访问：</p><p><img src="https://riger.oss-cn-shanghai.aliyuncs.com/img/image-20210112114058484.png" alt="image-20210112114058484"></p><h2 id="5-发布"><a href="#5-发布" class="headerlink" title="5. 发布"></a>5. 发布</h2><p>我们在项目根目录下使用maven命令来打包项目（使用Idea的Maven插件点击按钮也可以）：</p><p><code>-Dmaven.test.skip=true</code>可以跳过测试</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">mvn clean package -Dmaven.test.skip=true<br></code></pre></div></td></tr></table></figure><p><img src="https://riger.oss-cn-shanghai.aliyuncs.com/img/image-20210112115142859.png" alt="image-20210112115142859"></p><p>打包完成后，<code>target</code>路径下就有了我们需要的可执行 <code>jar</code>：</p><p><img src="https://riger.oss-cn-shanghai.aliyuncs.com/img/image-20210112115232952.png" alt="image-20210112115232952"></p><p>然后就可以把 <code>jar</code>丢到服务端，运行起来：</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">java -jar web-simple-0.0.1-SNAPSHOT.jar<br></code></pre></div></td></tr></table></figure><p>但是这样会占用控制台，可以使用 <code>nohup</code>命令在后台启动</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">nohup java -jar web-simple-0.0.1-SNAPSHOT.jar &gt;/dev/null 2&gt;&amp;1 &amp;<br></code></pre></div></td></tr></table></figure><p>一般在服务器端会写一个启动脚本来控制应用的启动、关闭等操作，并且还可以配置想要的启动参数、环境变量等</p><p>这会在后续的博文中详细介绍，这里仅仅给出一个我使用的启动脚本文件：</p><p><code>start.sh</code></p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash"><span class="hljs-meta">#!/bin/bash</span><br>JDK_HOME=<span class="hljs-string">&quot;java&quot;</span><br>VM_OPTS=<span class="hljs-string">&quot;-Xms1g -Xmx1g&quot;</span><br>SPB_OPTS=<span class="hljs-string">&quot;--spring.profiles.active=test&quot;</span><br>APP_LOCATION=<span class="hljs-string">&quot;web-simple-0.0.1-SNAPSHOT.jar&quot;</span><br>APP_NAME=<span class="hljs-string">&quot;web-simple-0.0.1-SNAPSHOT.jar&quot;</span><br>PID_CMD=<span class="hljs-string">&quot;ps -ef |grep <span class="hljs-variable">$APP_NAME</span> |grep -v grep |awk &#x27;&#123;print \$2&#125;&#x27;&quot;</span><br><br><span class="hljs-function"><span class="hljs-title">start</span></span>() &#123;<br>  <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;=============================start==============================&quot;</span><br>  PID=$(<span class="hljs-built_in">eval</span> <span class="hljs-string">&quot;<span class="hljs-variable">$PID_CMD</span>&quot;</span>)<br>  <span class="hljs-keyword">if</span> [[ -n <span class="hljs-variable">$PID</span> ]]; <span class="hljs-keyword">then</span><br>    <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;<span class="hljs-variable">$APP_NAME</span> is already running,PID is <span class="hljs-variable">$PID</span>&quot;</span><br>  <span class="hljs-keyword">else</span><br>    nohup <span class="hljs-variable">$JDK_HOME</span> <span class="hljs-variable">$VM_OPTS</span> -jar <span class="hljs-variable">$APP_LOCATION</span> <span class="hljs-variable">$SPB_OPTS</span> &gt;/dev/null 2&gt;&amp;1 &amp;<br>    <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;nohup <span class="hljs-variable">$JDK_HOME</span> <span class="hljs-variable">$VM_OPTS</span> -jar <span class="hljs-variable">$APP_LOCATION</span> <span class="hljs-variable">$SPB_OPTS</span> &gt;/dev/null 2&gt;&amp;1 &amp;&quot;</span><br>    PID=$(<span class="hljs-built_in">eval</span> <span class="hljs-string">&quot;<span class="hljs-variable">$PID_CMD</span>&quot;</span>)<br>    <span class="hljs-keyword">if</span> [[ -n <span class="hljs-variable">$PID</span> ]]; <span class="hljs-keyword">then</span><br>      <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;Start <span class="hljs-variable">$APP_NAME</span> successfully,PID is <span class="hljs-variable">$PID</span>&quot;</span><br>    <span class="hljs-keyword">else</span><br>      <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;Failed to start <span class="hljs-variable">$APP_NAME</span> !!!&quot;</span><br>    <span class="hljs-keyword">fi</span><br>  <span class="hljs-keyword">fi</span><br>  <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;=============================start==============================&quot;</span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-title">stop</span></span>() &#123;<br>  <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;=============================stop==============================&quot;</span><br>  PID=$(<span class="hljs-built_in">eval</span> <span class="hljs-string">&quot;<span class="hljs-variable">$PID_CMD</span>&quot;</span>)<br>  <span class="hljs-keyword">if</span> [[ -n <span class="hljs-variable">$PID</span> ]]; <span class="hljs-keyword">then</span><br>    <span class="hljs-built_in">kill</span> -15 <span class="hljs-string">&quot;<span class="hljs-variable">$PID</span>&quot;</span><br>    sleep 5<br>    PID=$(<span class="hljs-built_in">eval</span> <span class="hljs-string">&quot;<span class="hljs-variable">$PID_CMD</span>&quot;</span>)<br>    <span class="hljs-keyword">if</span> [[ -n <span class="hljs-variable">$PID</span> ]]; <span class="hljs-keyword">then</span><br>      <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;Stop <span class="hljs-variable">$APP_NAME</span> failed by kill -15 <span class="hljs-variable">$PID</span>,begin to kill -9 <span class="hljs-variable">$PID</span>&quot;</span><br>      <span class="hljs-built_in">kill</span> -9 <span class="hljs-string">&quot;<span class="hljs-variable">$PID</span>&quot;</span><br>      sleep 2<br>      <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;Stop <span class="hljs-variable">$APP_NAME</span> successfully by kill -9 <span class="hljs-variable">$PID</span>&quot;</span><br>    <span class="hljs-keyword">else</span><br>      <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;Stop <span class="hljs-variable">$APP_NAME</span> successfully by kill -15 <span class="hljs-variable">$PID</span>&quot;</span><br>    <span class="hljs-keyword">fi</span><br>  <span class="hljs-keyword">else</span><br>    <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;<span class="hljs-variable">$APP_NAME</span> is not running!!!&quot;</span><br>  <span class="hljs-keyword">fi</span><br>  <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;=============================stop==============================&quot;</span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-title">restart</span></span>() &#123;<br>  <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;=============================restart==============================&quot;</span><br>  stop<br>  start<br>  <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;=============================restart==============================&quot;</span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-title">status</span></span>() &#123;<br>  <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;=============================status==============================&quot;</span><br>  PID=$(<span class="hljs-built_in">eval</span> <span class="hljs-string">&quot;<span class="hljs-variable">$PID_CMD</span>&quot;</span>)<br>  <span class="hljs-keyword">if</span> [[ -n <span class="hljs-variable">$PID</span> ]]; <span class="hljs-keyword">then</span><br>    <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;<span class="hljs-variable">$APP_NAME</span> is running,PID is <span class="hljs-variable">$PID</span>&quot;</span><br>  <span class="hljs-keyword">else</span><br>    <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;<span class="hljs-variable">$APP_NAME</span> is not running!!!&quot;</span><br>  <span class="hljs-keyword">fi</span><br>  <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;=============================status==============================&quot;</span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-title">info</span></span>() &#123;<br>  <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;=============================info==============================&quot;</span><br>  <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;APP_LOCATION: <span class="hljs-variable">$APP_LOCATION</span>&quot;</span><br>  <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;APP_NAME: <span class="hljs-variable">$APP_NAME</span>&quot;</span><br>  <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;JDK_HOME: <span class="hljs-variable">$JDK_HOME</span>&quot;</span><br>  <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;VM_OPTS: <span class="hljs-variable">$VM_OPTS</span>&quot;</span><br>  <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;SPB_OPTS: <span class="hljs-variable">$SPB_OPTS</span>&quot;</span><br>  <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;=============================info==============================&quot;</span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-title">help</span></span>() &#123;<br>  <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;start: start server&quot;</span><br>  <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;stop: shutdown server&quot;</span><br>  <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;restart: restart server&quot;</span><br>  <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;status: display status of server&quot;</span><br>  <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;info: display info of server&quot;</span><br>  <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;help: help info&quot;</span><br>&#125;<br><br><span class="hljs-keyword">case</span> <span class="hljs-variable">$1</span> <span class="hljs-keyword">in</span><br>start)<br>  start<br>  ;;<br>stop)<br>  stop<br>  ;;<br>restart)<br>  restart<br>  ;;<br>status)<br>  status<br>  ;;<br>info)<br>  info<br>  ;;<br><span class="hljs-built_in">help</span>)<br>  <span class="hljs-built_in">help</span><br>  ;;<br>*)<br>  <span class="hljs-built_in">help</span><br>  ;;<br><span class="hljs-keyword">esac</span><br><span class="hljs-built_in">exit</span> $?<br></code></pre></div></td></tr></table></figure><p>可以很方便地使用一下命令：</p><figure class="highlight sql"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sql">~ ./start.sh<br><span class="hljs-keyword">start</span>: <span class="hljs-keyword">start</span> <span class="hljs-keyword">server</span><br><span class="hljs-keyword">stop</span>: <span class="hljs-keyword">shutdown</span> <span class="hljs-keyword">server</span><br>restart: restart <span class="hljs-keyword">server</span><br><span class="hljs-keyword">status</span>: display <span class="hljs-keyword">status</span> <span class="hljs-keyword">of</span> <span class="hljs-keyword">server</span><br>info: display info <span class="hljs-keyword">of</span> <span class="hljs-keyword">server</span><br><span class="hljs-keyword">help</span>: <span class="hljs-keyword">help</span> info<br>~ ./start.sh <span class="hljs-keyword">start</span><br>=============================<span class="hljs-keyword">start</span>==============================<br>nohup <span class="hljs-keyword">java</span> -Xms1g -Xmx1g -jar target/web-simple<span class="hljs-number">-0.0</span><span class="hljs-number">.1</span>-SNAPSHOT.jar <span class="hljs-comment">--spring.profiles.active=dev &gt;/dev/null 2&gt;&amp;1 &amp;</span><br><span class="hljs-keyword">Start</span> web-simple<span class="hljs-number">-0.0</span><span class="hljs-number">.1</span>-SNAPSHOT.jar successfully,PID <span class="hljs-keyword">is</span> <span class="hljs-number">6508</span><br>=============================<span class="hljs-keyword">start</span>==============================<br> ~ ./start.sh <span class="hljs-keyword">status</span><br>=============================<span class="hljs-keyword">status</span>==============================<br>web-simple<span class="hljs-number">-0.0</span><span class="hljs-number">.1</span>-SNAPSHOT.jar <span class="hljs-keyword">is</span> running,PID <span class="hljs-keyword">is</span> <span class="hljs-number">6508</span><br>=============================<span class="hljs-keyword">status</span>==============================<br> ~ ./start.sh <span class="hljs-keyword">stop</span>  <br>=============================<span class="hljs-keyword">stop</span>==============================<br><span class="hljs-keyword">Stop</span> web-simple<span class="hljs-number">-0.0</span><span class="hljs-number">.1</span>-SNAPSHOT.jar successfully <span class="hljs-keyword">by</span> <span class="hljs-keyword">kill</span> <span class="hljs-number">-15</span> <br>=============================<span class="hljs-keyword">stop</span>==============================<br> ~ <br></code></pre></div></td></tr></table></figure><p>源码及脚本都在<a href="https://github.com/RigerWu/web-starter-demos">Github</a>上</p><p>Enjoy it!</p>]]></content>
    
    
    <categories>
      
      <category>spring boot</category>
      
    </categories>
    
    
    <tags>
      
      <tag>spring boot</tag>
      
      <tag>idea</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>后端开发需要掌握的SSH命令和技巧</title>
    <link href="/2020/12/29/backend-ssh/"/>
    <url>/2020/12/29/backend-ssh/</url>
    
    <content type="html"><![CDATA[<h1 id="后端开发需要掌握的-SSH-命令和技巧"><a href="#后端开发需要掌握的-SSH-命令和技巧" class="headerlink" title="后端开发需要掌握的 SSH 命令和技巧"></a>后端开发需要掌握的 SSH 命令和技巧</h1><blockquote><p>本教程仅针对<code>MacOS</code>、<code>Linux</code>平台，不适用<code>Windows</code></p></blockquote><h2 id="1-常用-SSH-命令"><a href="#1-常用-SSH-命令" class="headerlink" title="1. 常用 SSH 命令"></a>1. 常用 SSH 命令</h2><ul><li>生成本机上的 ssh 密钥对</li></ul><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">ssh-keygen -t rsa -C &quot;xxxxx@xxxxx.com&quot;<br></code></pre></div></td></tr></table></figure><p>生成的公钥、私钥在<code>~/.ssh</code>目录下:</p><p><img src="https://riger.oss-cn-shanghai.aliyuncs.com/img/image-20201229134915683.png" alt="image-20201229134915683"></p><ol><li><code>id_rsa</code>是私钥</li><li><code>id_rsa.pub</code>是公钥，可以拷贝里面的字符串放到 Github 的后台，使用 Git 协议可以免密</li><li><code>config</code>是配置文件，后面会详细讲</li><li><code>know_hosts</code>是你信任的服务器列表，连接服务器，输入<code>yes</code>后会加一条</li></ol><ul><li>连接服务器</li></ul><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">ssh -p port user@server_ip<br></code></pre></div></td></tr></table></figure><ul><li>文件拷贝</li></ul><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"> 注意这里的P用的大写的</span><br>scp -P port local_file user@server_ip:server_folder<br>scp -P port user@server_ip:server_file local_folder<br></code></pre></div></td></tr></table></figure><h2 id="2-命令简化和免密"><a href="#2-命令简化和免密" class="headerlink" title="2. 命令简化和免密"></a>2. 命令简化和免密</h2><p>可以看到每次连接服务器或者拷贝文件都需要输入完整的用户名、ip 之后还要输入密码，非常麻烦</p><p>先使用配置文件来简化命令：</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">vi .ssh/config<br></code></pre></div></td></tr></table></figure><p>这样配置：</p><figure class="highlight crmsh"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs crmsh">Host dns<br>    HostName config.rigerwu.com<br>    <span class="hljs-keyword">User</span> <span class="hljs-title">riger</span><br>    Port <span class="hljs-number">22</span><br></code></pre></div></td></tr></table></figure><p><code>Host</code>后是你给服务器取的别名，我这里用的<code>“dns”</code>，<code>HostName</code>填域名或<code>ip</code>都可以，然后是用户名和端口。</p><p>以后我们直接使用<code>ssh dns</code>就可以访问服务器，名字还可以用<code>tab</code>来代码提示：</p><p><img src="https://riger.oss-cn-shanghai.aliyuncs.com/img/image-20201229143645153.png" alt="image-20201229143645153"></p><p>包括<code>scp</code>命令也可以来简化：</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">scp local_file dns:server_folder<br></code></pre></div></td></tr></table></figure><p>再来做免密登录，使用<code>ssh-copy-id</code>命令把自己的公钥，拷贝到服务器端的 <code>.ssh/authorized_keys</code>中，这样以后就不用输入密码了：</p><p><img src="https://riger.oss-cn-shanghai.aliyuncs.com/img/image-20201229144130799.png" alt="image-20201229144130799"></p><p>这个再<code>ssh dns</code>就已经可以直接免密登录了：</p><p><img src="https://riger.oss-cn-shanghai.aliyuncs.com/img/image-20201229144411394.png" alt="image-20201229144411394"></p><p>甚至<code>scp</code>命令都能<code>tab</code>提示远程的路径：</p><p><img src="https://riger.oss-cn-shanghai.aliyuncs.com/img/image-20201229144342128.png" alt="image-20201229144342128"></p><p>配合上<code>zsh</code>的代码提示或 alias，常用的文件拷贝就变得非常方便！</p><h2 id="3-解决-SSH-超时中断"><a href="#3-解决-SSH-超时中断" class="headerlink" title="3. 解决 SSH 超时中断"></a>3. 解决 SSH 超时中断</h2><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">vi .ssh/config<br></code></pre></div></td></tr></table></figure><p>这样配置：</p><figure class="highlight apache"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs apache"><span class="hljs-attribute">Host</span> *<br>    <span class="hljs-attribute">TCPKeepAlive</span> yes<br>    <span class="hljs-attribute">ServerAliveInterval</span> <span class="hljs-number">60</span><br>    <span class="hljs-attribute">ServerAliveCountMax</span> <span class="hljs-number">5</span><br></code></pre></div></td></tr></table></figure><p>但是有些服务端还是会一段时间无输入就终端连接，在服务端的<code>.bash_profile</code>中增加一行:</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">export TMOUT=0<br></code></pre></div></td></tr></table></figure><p>设置不限制超时时间，这样就可以保持连接不中断了</p><p>Enjoy it ！</p>]]></content>
    
    
    <categories>
      
      <category>tools</category>
      
    </categories>
    
    
    <tags>
      
      <tag>ssh</tag>
      
      <tag>tools</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>macOS iTerm2 开发环境配置</title>
    <link href="/2020/12/25/macos-iterm2/"/>
    <url>/2020/12/25/macos-iterm2/</url>
    
    <content type="html"><![CDATA[<h1 id="macOS-iTerm2-开发环境配置"><a href="#macOS-iTerm2-开发环境配置" class="headerlink" title="macOS iTerm2 开发环境配置"></a>macOS iTerm2 开发环境配置</h1><p><img src="https://riger.oss-cn-shanghai.aliyuncs.com/img/image-20201214140102118.png" alt="image-20201214140102118"></p><blockquote><p>注意：本文很多应用的安装都是走的 Github，建议在科学上网环境中进行。</p></blockquote><h2 id="1-iTerm2-安装"><a href="#1-iTerm2-安装" class="headerlink" title="1. iTerm2 安装"></a>1. iTerm2 安装</h2><p>放弃使用系统自带 Terminl， 在 <a href="https://iterm2.com/">iTerm2 官网</a> 下载安装</p><div align="center"><img src="https://riger.oss-cn-shanghai.aliyuncs.com/img/image-20201214135558722.png" alt="image-20201214135558722" style="zoom:50%;" /></div><p>安装后打开，按上图，点击<code>Make iTerm2 Default Term</code>设置为默认终端</p><h2 id="2-安装-Homebrew"><a href="#2-安装-Homebrew" class="headerlink" title="2. 安装 Homebrew"></a>2. 安装 Homebrew</h2><p><a href="https://brew.sh/index_zh-cn"><code>Homebrew</code></a>自称是<code>MacOS</code>或<code>Linux</code>缺失的软件包管理器，使用它可以一行命令安装各种开发类工具及应用程序</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">/bin/bash -c &quot;$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install.sh)&quot;<br></code></pre></div></td></tr></table></figure><h2 id="3-安装-zsh"><a href="#3-安装-zsh" class="headerlink" title="3. 安装 zsh"></a>3. 安装 zsh</h2><p><code>MacOS</code>自带<code>zsh</code>，不过版本比较老，我们使用<code>homebrew</code>安装最新版，并修改默认<code>shell</code>为自己下载的<code>zsh</code></p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">brew install zsh<br>echo &quot;/usr/local/bin/zsh&quot; | sudo tee -a /etc/shells<br>chsh -s /usr/local/bin/zsh<br></code></pre></div></td></tr></table></figure><h2 id="4-安装-ohmyzsh"><a href="#4-安装-ohmyzsh" class="headerlink" title="4. 安装 ohmyzsh"></a>4. 安装 ohmyzsh</h2><p>运行下面的命名即可安装。 <a href="https://github.com/ohmyzsh/ohmyzsh">ohmyzsh 官网</a>也可以去看看各种插件和主题。</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">sh -c &quot;$(curl -fsSL https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh)&quot;<br></code></pre></div></td></tr></table></figure><p><code>zsh</code>的配置文件在：<code>~/.zshrc</code>,后面的配置都在这里面，这里假设你会使用<code>vim</code>，不会可自行使用<code>Sublime</code>等编辑器。</p><h2 id="5-字体主题配置"><a href="#5-字体主题配置" class="headerlink" title="5. 字体主题配置"></a>5. 字体主题配置</h2><p>虽然主题这个东西是一个比较个性化的东西，但是我还是要隆重推荐一下<code>Grovbox</code>主题，我 的<code>IDE</code>、<code>iTerm</code> 和 <code>Vim</code>都用的这个主题:</p><p>Github 下载 iTerm2 的 <a href="https://github.com/AmmarCodes/gruvbox-material-iterm2">gruvbox-material</a> 主题, 双击安装</p><p>打开设置, Profiles, Default, Colors, 右下角的 Clolor Presets 选择 <code>grovbox-material</code></p><p>安装 Fira 字体, 及其对应 Nerd 版(配合 devicons 使用)</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">brew tap homebrew/cask-fonts<br>// 这个是给idea, vscode之类用<br>brew cask install font-fira-code<br>// iTerm2 vim 专用<br>brew cask install font-fira-code-nerd-font<br></code></pre></div></td></tr></table></figure><p>打开<code>iTerm2</code>设置, Profiles, Default, Text, Font, 选择 <code>Fira Code Nerd</code>, 勾选<code>Use ligatures</code></p><p>参考 ohmyzsh 提供的这些 <a href="https://github.com/ohmyzsh/ohmyzsh/wiki/themes">主题</a>可以选一个自己喜欢的, 推荐 agnoster</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">cd ~/Downloads<br>git clone https://github.com/fcamblor/oh-my-zsh-agnoster-fcamblor.git<br>cd oh-my-zsh-agnoster-fcamblor/<br>./install<br>vi .zshrc<br>ZSH_THEME=&quot;agnoster&quot;<br></code></pre></div></td></tr></table></figure><p>去掉路径中的用户名，设置<code>DEFAULT_USER</code>和你的用户名一直即可:</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"> .zshrc 里增加：</span><br>DEFAULT_USER=&quot;riger&quot;<br></code></pre></div></td></tr></table></figure><h2 id="6-插件安装及配置"><a href="#6-插件安装及配置" class="headerlink" title="6. 插件安装及配置"></a>6. 插件安装及配置</h2><p>安装一些好用的插件:</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">brew install autojump<br>git clone git://github.com/zsh-users/zsh-autosuggestions $ZSH_CUSTOM/plugins/zsh-autosuggestions<br>git clone git://github.com/zsh-users/zsh-syntax-highlighting $ZSH_CUSTOM/plugins/zsh-syntax-highlighting<br><br>vi .zshrc<br><span class="hljs-meta">#</span><span class="bash"> 修改如下</span><br>plugins=(<br>    git<br>    sublime<br>    zsh-autosuggestions<br>    autojump<br>    zsh-syntax-highlighting<br>)<br></code></pre></div></td></tr></table></figure><p>简单说明一下我开启的这些插件：</p><ul><li><code>git</code>: 默认就开启的，可以看到文章第一张图，路径上即可显示当前分支是在<code>Master</code>，还有很多方便使用的<code>alias</code></li></ul><p>我常用的有：</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">ga=&#x27;git add&#x27;<br>gst=&#x27;git status&#x27;<br>gcmsg=&#x27;git commit -m&#x27;<br>glola=&#x27;git log --graph --pretty=&#x27;\&#x27;&#x27;%Cred%h%Creset -%C(auto)%d%Creset %s %Cgreen(%cr) %C(bold blue)&lt;%an&gt;%Creset&#x27;\&#x27;&#x27; --all&#x27;<br><span class="hljs-meta">#</span><span class="bash"> 命令行输入 <span class="hljs-built_in">alias</span> 即可看到所有的<span class="hljs-built_in">alias</span></span><br></code></pre></div></td></tr></table></figure><ul><li><p><code>sublime</code>：<code>st 文件或路径</code> 使用<code>sublime</code>打开文件或路径；<code>stt</code> 打开当前路径</p></li><li><p><code>zsh-autosuggestions</code>：命令提示，用过的命令，按方向 → 自动完成</p></li></ul><p><img src="https://riger.oss-cn-shanghai.aliyuncs.com/img/image-20201227231810507.png" alt="image-20201227231810507"></p><ul><li><code>autojump</code>: <code>j + 关键字</code> 进入你最近去过的含关键字的路径，比如我进过<code>jdk</code>的路径，以后只要输入：</li></ul><figure class="highlight sh"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sh">j jdk<br></code></pre></div></td></tr></table></figure><p>就可以回到<code>jdk</code>路径，是不是很方便？</p><p><img src="https://riger.oss-cn-shanghai.aliyuncs.com/img/image-20201227232454896.png" alt="image-20201227232454896"></p><ul><li><code>zsh-syntax-highlighting</code>: <code>shell</code> 命令高亮，没有人能拒绝高亮。</li></ul><p><img src="https://riger.oss-cn-shanghai.aliyuncs.com/img/image-20201228101251109.png" alt="image-20201228101251109"></p><h2 id="7-其他"><a href="#7-其他" class="headerlink" title="7. 其他"></a>7. 其他</h2><p>以后开发相关的配置都是放在<code>.zshrc</code>中的，比如<code>PATH</code>配置，一些脚本参数配置等。</p><p>还可以自行配置<code>Alias</code> 方便自己的使用，比如我配置的一些：</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">alias py3=&quot;python3&quot;<br>alias openapk=&quot;open -a Finder app/build/outputs/apk&quot;<br>alias releaseapp=&quot;./gradlew assemblerelease&quot;<br>alias sqllogin=&quot;mysql -uroot -p123456&quot;<br>alias redisstart=&quot;redis-server /usr/local/etc/redis.conf&quot;<br>alias logcasher=&quot;pidcat net.worthtech.worthcasher&quot;<br>alias showAct=&quot;adb shell dumpsys activity top | grep ACTIVITY&quot;<br>alias starttom=&quot;~/Library/tomcat/bin/startup.sh&quot;<br>alias stoptom=&quot;~/Library/tomcat/bin/shutdown.sh&quot;<br>alias signapk=&quot;signtest app/build/outputs/apk/release/app-release-unsigned.apk&quot;<br>alias jmeter=&quot;~/dev/apache-jmeter-5.3/bin/jmeter&quot;<br>alias uninstallcasher=&quot;adb shell pm uninstall -k net.worthtech.worthcasher&quot;<br></code></pre></div></td></tr></table></figure><p>配置完后不要忘记让配置生效：</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">source .zshrc<br></code></pre></div></td></tr></table></figure><p>Enjoy it !</p>]]></content>
    
    
    <categories>
      
      <category>tools</category>
      
    </categories>
    
    
    <tags>
      
      <tag>iTerm2</tag>
      
      <tag>macOS</tag>
      
      <tag>zsh</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
